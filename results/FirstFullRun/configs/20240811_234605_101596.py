cmmlu_datasets=[
    dict(abbr='cmmlu-agronomy',
        eval_cfg=dict(
            evaluator=dict(
                type='opencompass.openicl.icl_evaluator.AccEvaluator')),
        infer_cfg=dict(
            ice_template=dict(
                ice_token='</E>',
                template=dict(
                    A=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于农学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: A',
                                role='BOT'),
                            ]),
                    B=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于农学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: B',
                                role='BOT'),
                            ]),
                    C=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于农学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: C',
                                role='BOT'),
                            ]),
                    D=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于农学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: D',
                                role='BOT'),
                            ])),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.PPLInferencer'),
            retriever=dict(
                fix_id_list=[
                    0,
                    1,
                    2,
                    3,
                    4,
                    ],
                type='opencompass.openicl.icl_retriever.FixKRetriever')),
        name='agronomy',
        path='opencompass/cmmlu',
        reader_cfg=dict(
            input_columns=[
                'question',
                'A',
                'B',
                'C',
                'D',
                ],
            output_column='answer',
            test_split='test',
            train_split='dev'),
        type='opencompass.datasets.CMMLUDataset'),
    dict(abbr='cmmlu-anatomy',
        eval_cfg=dict(
            evaluator=dict(
                type='opencompass.openicl.icl_evaluator.AccEvaluator')),
        infer_cfg=dict(
            ice_template=dict(
                ice_token='</E>',
                template=dict(
                    A=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于解剖学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: A',
                                role='BOT'),
                            ]),
                    B=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于解剖学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: B',
                                role='BOT'),
                            ]),
                    C=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于解剖学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: C',
                                role='BOT'),
                            ]),
                    D=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于解剖学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: D',
                                role='BOT'),
                            ])),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.PPLInferencer'),
            retriever=dict(
                fix_id_list=[
                    0,
                    1,
                    2,
                    3,
                    4,
                    ],
                type='opencompass.openicl.icl_retriever.FixKRetriever')),
        name='anatomy',
        path='opencompass/cmmlu',
        reader_cfg=dict(
            input_columns=[
                'question',
                'A',
                'B',
                'C',
                'D',
                ],
            output_column='answer',
            test_split='test',
            train_split='dev'),
        type='opencompass.datasets.CMMLUDataset'),
    dict(abbr='cmmlu-ancient_chinese',
        eval_cfg=dict(
            evaluator=dict(
                type='opencompass.openicl.icl_evaluator.AccEvaluator')),
        infer_cfg=dict(
            ice_template=dict(
                ice_token='</E>',
                template=dict(
                    A=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于古汉语的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: A',
                                role='BOT'),
                            ]),
                    B=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于古汉语的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: B',
                                role='BOT'),
                            ]),
                    C=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于古汉语的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: C',
                                role='BOT'),
                            ]),
                    D=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于古汉语的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: D',
                                role='BOT'),
                            ])),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.PPLInferencer'),
            retriever=dict(
                fix_id_list=[
                    0,
                    1,
                    2,
                    3,
                    4,
                    ],
                type='opencompass.openicl.icl_retriever.FixKRetriever')),
        name='ancient_chinese',
        path='opencompass/cmmlu',
        reader_cfg=dict(
            input_columns=[
                'question',
                'A',
                'B',
                'C',
                'D',
                ],
            output_column='answer',
            test_split='test',
            train_split='dev'),
        type='opencompass.datasets.CMMLUDataset'),
    dict(abbr='cmmlu-arts',
        eval_cfg=dict(
            evaluator=dict(
                type='opencompass.openicl.icl_evaluator.AccEvaluator')),
        infer_cfg=dict(
            ice_template=dict(
                ice_token='</E>',
                template=dict(
                    A=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于艺术学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: A',
                                role='BOT'),
                            ]),
                    B=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于艺术学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: B',
                                role='BOT'),
                            ]),
                    C=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于艺术学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: C',
                                role='BOT'),
                            ]),
                    D=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于艺术学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: D',
                                role='BOT'),
                            ])),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.PPLInferencer'),
            retriever=dict(
                fix_id_list=[
                    0,
                    1,
                    2,
                    3,
                    4,
                    ],
                type='opencompass.openicl.icl_retriever.FixKRetriever')),
        name='arts',
        path='opencompass/cmmlu',
        reader_cfg=dict(
            input_columns=[
                'question',
                'A',
                'B',
                'C',
                'D',
                ],
            output_column='answer',
            test_split='test',
            train_split='dev'),
        type='opencompass.datasets.CMMLUDataset'),
    dict(abbr='cmmlu-astronomy',
        eval_cfg=dict(
            evaluator=dict(
                type='opencompass.openicl.icl_evaluator.AccEvaluator')),
        infer_cfg=dict(
            ice_template=dict(
                ice_token='</E>',
                template=dict(
                    A=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于天文学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: A',
                                role='BOT'),
                            ]),
                    B=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于天文学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: B',
                                role='BOT'),
                            ]),
                    C=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于天文学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: C',
                                role='BOT'),
                            ]),
                    D=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于天文学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: D',
                                role='BOT'),
                            ])),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.PPLInferencer'),
            retriever=dict(
                fix_id_list=[
                    0,
                    1,
                    2,
                    3,
                    4,
                    ],
                type='opencompass.openicl.icl_retriever.FixKRetriever')),
        name='astronomy',
        path='opencompass/cmmlu',
        reader_cfg=dict(
            input_columns=[
                'question',
                'A',
                'B',
                'C',
                'D',
                ],
            output_column='answer',
            test_split='test',
            train_split='dev'),
        type='opencompass.datasets.CMMLUDataset'),
    dict(abbr='cmmlu-business_ethics',
        eval_cfg=dict(
            evaluator=dict(
                type='opencompass.openicl.icl_evaluator.AccEvaluator')),
        infer_cfg=dict(
            ice_template=dict(
                ice_token='</E>',
                template=dict(
                    A=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于商业伦理的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: A',
                                role='BOT'),
                            ]),
                    B=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于商业伦理的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: B',
                                role='BOT'),
                            ]),
                    C=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于商业伦理的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: C',
                                role='BOT'),
                            ]),
                    D=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于商业伦理的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: D',
                                role='BOT'),
                            ])),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.PPLInferencer'),
            retriever=dict(
                fix_id_list=[
                    0,
                    1,
                    2,
                    3,
                    4,
                    ],
                type='opencompass.openicl.icl_retriever.FixKRetriever')),
        name='business_ethics',
        path='opencompass/cmmlu',
        reader_cfg=dict(
            input_columns=[
                'question',
                'A',
                'B',
                'C',
                'D',
                ],
            output_column='answer',
            test_split='test',
            train_split='dev'),
        type='opencompass.datasets.CMMLUDataset'),
    dict(abbr='cmmlu-chinese_civil_service_exam',
        eval_cfg=dict(
            evaluator=dict(
                type='opencompass.openicl.icl_evaluator.AccEvaluator')),
        infer_cfg=dict(
            ice_template=dict(
                ice_token='</E>',
                template=dict(
                    A=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于中国公务员考试的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: A',
                                role='BOT'),
                            ]),
                    B=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于中国公务员考试的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: B',
                                role='BOT'),
                            ]),
                    C=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于中国公务员考试的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: C',
                                role='BOT'),
                            ]),
                    D=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于中国公务员考试的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: D',
                                role='BOT'),
                            ])),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.PPLInferencer'),
            retriever=dict(
                fix_id_list=[
                    0,
                    1,
                    2,
                    3,
                    4,
                    ],
                type='opencompass.openicl.icl_retriever.FixKRetriever')),
        name='chinese_civil_service_exam',
        path='opencompass/cmmlu',
        reader_cfg=dict(
            input_columns=[
                'question',
                'A',
                'B',
                'C',
                'D',
                ],
            output_column='answer',
            test_split='test',
            train_split='dev'),
        type='opencompass.datasets.CMMLUDataset'),
    dict(abbr='cmmlu-chinese_driving_rule',
        eval_cfg=dict(
            evaluator=dict(
                type='opencompass.openicl.icl_evaluator.AccEvaluator')),
        infer_cfg=dict(
            ice_template=dict(
                ice_token='</E>',
                template=dict(
                    A=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于中国驾驶规则的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: A',
                                role='BOT'),
                            ]),
                    B=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于中国驾驶规则的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: B',
                                role='BOT'),
                            ]),
                    C=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于中国驾驶规则的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: C',
                                role='BOT'),
                            ]),
                    D=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于中国驾驶规则的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: D',
                                role='BOT'),
                            ])),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.PPLInferencer'),
            retriever=dict(
                fix_id_list=[
                    0,
                    1,
                    2,
                    3,
                    4,
                    ],
                type='opencompass.openicl.icl_retriever.FixKRetriever')),
        name='chinese_driving_rule',
        path='opencompass/cmmlu',
        reader_cfg=dict(
            input_columns=[
                'question',
                'A',
                'B',
                'C',
                'D',
                ],
            output_column='answer',
            test_split='test',
            train_split='dev'),
        type='opencompass.datasets.CMMLUDataset'),
    dict(abbr='cmmlu-chinese_food_culture',
        eval_cfg=dict(
            evaluator=dict(
                type='opencompass.openicl.icl_evaluator.AccEvaluator')),
        infer_cfg=dict(
            ice_template=dict(
                ice_token='</E>',
                template=dict(
                    A=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于中国饮食文化的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: A',
                                role='BOT'),
                            ]),
                    B=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于中国饮食文化的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: B',
                                role='BOT'),
                            ]),
                    C=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于中国饮食文化的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: C',
                                role='BOT'),
                            ]),
                    D=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于中国饮食文化的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: D',
                                role='BOT'),
                            ])),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.PPLInferencer'),
            retriever=dict(
                fix_id_list=[
                    0,
                    1,
                    2,
                    3,
                    4,
                    ],
                type='opencompass.openicl.icl_retriever.FixKRetriever')),
        name='chinese_food_culture',
        path='opencompass/cmmlu',
        reader_cfg=dict(
            input_columns=[
                'question',
                'A',
                'B',
                'C',
                'D',
                ],
            output_column='answer',
            test_split='test',
            train_split='dev'),
        type='opencompass.datasets.CMMLUDataset'),
    dict(abbr='cmmlu-chinese_foreign_policy',
        eval_cfg=dict(
            evaluator=dict(
                type='opencompass.openicl.icl_evaluator.AccEvaluator')),
        infer_cfg=dict(
            ice_template=dict(
                ice_token='</E>',
                template=dict(
                    A=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于中国外交政策的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: A',
                                role='BOT'),
                            ]),
                    B=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于中国外交政策的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: B',
                                role='BOT'),
                            ]),
                    C=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于中国外交政策的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: C',
                                role='BOT'),
                            ]),
                    D=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于中国外交政策的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: D',
                                role='BOT'),
                            ])),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.PPLInferencer'),
            retriever=dict(
                fix_id_list=[
                    0,
                    1,
                    2,
                    3,
                    4,
                    ],
                type='opencompass.openicl.icl_retriever.FixKRetriever')),
        name='chinese_foreign_policy',
        path='opencompass/cmmlu',
        reader_cfg=dict(
            input_columns=[
                'question',
                'A',
                'B',
                'C',
                'D',
                ],
            output_column='answer',
            test_split='test',
            train_split='dev'),
        type='opencompass.datasets.CMMLUDataset'),
    dict(abbr='cmmlu-chinese_history',
        eval_cfg=dict(
            evaluator=dict(
                type='opencompass.openicl.icl_evaluator.AccEvaluator')),
        infer_cfg=dict(
            ice_template=dict(
                ice_token='</E>',
                template=dict(
                    A=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于中国历史的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: A',
                                role='BOT'),
                            ]),
                    B=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于中国历史的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: B',
                                role='BOT'),
                            ]),
                    C=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于中国历史的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: C',
                                role='BOT'),
                            ]),
                    D=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于中国历史的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: D',
                                role='BOT'),
                            ])),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.PPLInferencer'),
            retriever=dict(
                fix_id_list=[
                    0,
                    1,
                    2,
                    3,
                    4,
                    ],
                type='opencompass.openicl.icl_retriever.FixKRetriever')),
        name='chinese_history',
        path='opencompass/cmmlu',
        reader_cfg=dict(
            input_columns=[
                'question',
                'A',
                'B',
                'C',
                'D',
                ],
            output_column='answer',
            test_split='test',
            train_split='dev'),
        type='opencompass.datasets.CMMLUDataset'),
    dict(abbr='cmmlu-chinese_literature',
        eval_cfg=dict(
            evaluator=dict(
                type='opencompass.openicl.icl_evaluator.AccEvaluator')),
        infer_cfg=dict(
            ice_template=dict(
                ice_token='</E>',
                template=dict(
                    A=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于中国文学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: A',
                                role='BOT'),
                            ]),
                    B=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于中国文学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: B',
                                role='BOT'),
                            ]),
                    C=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于中国文学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: C',
                                role='BOT'),
                            ]),
                    D=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于中国文学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: D',
                                role='BOT'),
                            ])),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.PPLInferencer'),
            retriever=dict(
                fix_id_list=[
                    0,
                    1,
                    2,
                    3,
                    4,
                    ],
                type='opencompass.openicl.icl_retriever.FixKRetriever')),
        name='chinese_literature',
        path='opencompass/cmmlu',
        reader_cfg=dict(
            input_columns=[
                'question',
                'A',
                'B',
                'C',
                'D',
                ],
            output_column='answer',
            test_split='test',
            train_split='dev'),
        type='opencompass.datasets.CMMLUDataset'),
    dict(abbr='cmmlu-chinese_teacher_qualification',
        eval_cfg=dict(
            evaluator=dict(
                type='opencompass.openicl.icl_evaluator.AccEvaluator')),
        infer_cfg=dict(
            ice_template=dict(
                ice_token='</E>',
                template=dict(
                    A=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于中国教师资格的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: A',
                                role='BOT'),
                            ]),
                    B=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于中国教师资格的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: B',
                                role='BOT'),
                            ]),
                    C=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于中国教师资格的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: C',
                                role='BOT'),
                            ]),
                    D=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于中国教师资格的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: D',
                                role='BOT'),
                            ])),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.PPLInferencer'),
            retriever=dict(
                fix_id_list=[
                    0,
                    1,
                    2,
                    3,
                    4,
                    ],
                type='opencompass.openicl.icl_retriever.FixKRetriever')),
        name='chinese_teacher_qualification',
        path='opencompass/cmmlu',
        reader_cfg=dict(
            input_columns=[
                'question',
                'A',
                'B',
                'C',
                'D',
                ],
            output_column='answer',
            test_split='test',
            train_split='dev'),
        type='opencompass.datasets.CMMLUDataset'),
    dict(abbr='cmmlu-clinical_knowledge',
        eval_cfg=dict(
            evaluator=dict(
                type='opencompass.openicl.icl_evaluator.AccEvaluator')),
        infer_cfg=dict(
            ice_template=dict(
                ice_token='</E>',
                template=dict(
                    A=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于临床知识的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: A',
                                role='BOT'),
                            ]),
                    B=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于临床知识的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: B',
                                role='BOT'),
                            ]),
                    C=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于临床知识的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: C',
                                role='BOT'),
                            ]),
                    D=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于临床知识的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: D',
                                role='BOT'),
                            ])),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.PPLInferencer'),
            retriever=dict(
                fix_id_list=[
                    0,
                    1,
                    2,
                    3,
                    4,
                    ],
                type='opencompass.openicl.icl_retriever.FixKRetriever')),
        name='clinical_knowledge',
        path='opencompass/cmmlu',
        reader_cfg=dict(
            input_columns=[
                'question',
                'A',
                'B',
                'C',
                'D',
                ],
            output_column='answer',
            test_split='test',
            train_split='dev'),
        type='opencompass.datasets.CMMLUDataset'),
    dict(abbr='cmmlu-college_actuarial_science',
        eval_cfg=dict(
            evaluator=dict(
                type='opencompass.openicl.icl_evaluator.AccEvaluator')),
        infer_cfg=dict(
            ice_template=dict(
                ice_token='</E>',
                template=dict(
                    A=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于大学精算学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: A',
                                role='BOT'),
                            ]),
                    B=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于大学精算学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: B',
                                role='BOT'),
                            ]),
                    C=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于大学精算学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: C',
                                role='BOT'),
                            ]),
                    D=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于大学精算学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: D',
                                role='BOT'),
                            ])),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.PPLInferencer'),
            retriever=dict(
                fix_id_list=[
                    0,
                    1,
                    2,
                    3,
                    4,
                    ],
                type='opencompass.openicl.icl_retriever.FixKRetriever')),
        name='college_actuarial_science',
        path='opencompass/cmmlu',
        reader_cfg=dict(
            input_columns=[
                'question',
                'A',
                'B',
                'C',
                'D',
                ],
            output_column='answer',
            test_split='test',
            train_split='dev'),
        type='opencompass.datasets.CMMLUDataset'),
    dict(abbr='cmmlu-college_education',
        eval_cfg=dict(
            evaluator=dict(
                type='opencompass.openicl.icl_evaluator.AccEvaluator')),
        infer_cfg=dict(
            ice_template=dict(
                ice_token='</E>',
                template=dict(
                    A=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于大学教育学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: A',
                                role='BOT'),
                            ]),
                    B=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于大学教育学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: B',
                                role='BOT'),
                            ]),
                    C=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于大学教育学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: C',
                                role='BOT'),
                            ]),
                    D=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于大学教育学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: D',
                                role='BOT'),
                            ])),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.PPLInferencer'),
            retriever=dict(
                fix_id_list=[
                    0,
                    1,
                    2,
                    3,
                    4,
                    ],
                type='opencompass.openicl.icl_retriever.FixKRetriever')),
        name='college_education',
        path='opencompass/cmmlu',
        reader_cfg=dict(
            input_columns=[
                'question',
                'A',
                'B',
                'C',
                'D',
                ],
            output_column='answer',
            test_split='test',
            train_split='dev'),
        type='opencompass.datasets.CMMLUDataset'),
    dict(abbr='cmmlu-college_engineering_hydrology',
        eval_cfg=dict(
            evaluator=dict(
                type='opencompass.openicl.icl_evaluator.AccEvaluator')),
        infer_cfg=dict(
            ice_template=dict(
                ice_token='</E>',
                template=dict(
                    A=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于大学工程水文学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: A',
                                role='BOT'),
                            ]),
                    B=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于大学工程水文学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: B',
                                role='BOT'),
                            ]),
                    C=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于大学工程水文学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: C',
                                role='BOT'),
                            ]),
                    D=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于大学工程水文学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: D',
                                role='BOT'),
                            ])),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.PPLInferencer'),
            retriever=dict(
                fix_id_list=[
                    0,
                    1,
                    2,
                    3,
                    4,
                    ],
                type='opencompass.openicl.icl_retriever.FixKRetriever')),
        name='college_engineering_hydrology',
        path='opencompass/cmmlu',
        reader_cfg=dict(
            input_columns=[
                'question',
                'A',
                'B',
                'C',
                'D',
                ],
            output_column='answer',
            test_split='test',
            train_split='dev'),
        type='opencompass.datasets.CMMLUDataset'),
    dict(abbr='cmmlu-college_law',
        eval_cfg=dict(
            evaluator=dict(
                type='opencompass.openicl.icl_evaluator.AccEvaluator')),
        infer_cfg=dict(
            ice_template=dict(
                ice_token='</E>',
                template=dict(
                    A=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于大学法律的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: A',
                                role='BOT'),
                            ]),
                    B=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于大学法律的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: B',
                                role='BOT'),
                            ]),
                    C=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于大学法律的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: C',
                                role='BOT'),
                            ]),
                    D=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于大学法律的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: D',
                                role='BOT'),
                            ])),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.PPLInferencer'),
            retriever=dict(
                fix_id_list=[
                    0,
                    1,
                    2,
                    3,
                    4,
                    ],
                type='opencompass.openicl.icl_retriever.FixKRetriever')),
        name='college_law',
        path='opencompass/cmmlu',
        reader_cfg=dict(
            input_columns=[
                'question',
                'A',
                'B',
                'C',
                'D',
                ],
            output_column='answer',
            test_split='test',
            train_split='dev'),
        type='opencompass.datasets.CMMLUDataset'),
    dict(abbr='cmmlu-college_mathematics',
        eval_cfg=dict(
            evaluator=dict(
                type='opencompass.openicl.icl_evaluator.AccEvaluator')),
        infer_cfg=dict(
            ice_template=dict(
                ice_token='</E>',
                template=dict(
                    A=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于大学数学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: A',
                                role='BOT'),
                            ]),
                    B=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于大学数学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: B',
                                role='BOT'),
                            ]),
                    C=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于大学数学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: C',
                                role='BOT'),
                            ]),
                    D=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于大学数学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: D',
                                role='BOT'),
                            ])),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.PPLInferencer'),
            retriever=dict(
                fix_id_list=[
                    0,
                    1,
                    2,
                    3,
                    4,
                    ],
                type='opencompass.openicl.icl_retriever.FixKRetriever')),
        name='college_mathematics',
        path='opencompass/cmmlu',
        reader_cfg=dict(
            input_columns=[
                'question',
                'A',
                'B',
                'C',
                'D',
                ],
            output_column='answer',
            test_split='test',
            train_split='dev'),
        type='opencompass.datasets.CMMLUDataset'),
    dict(abbr='cmmlu-college_medical_statistics',
        eval_cfg=dict(
            evaluator=dict(
                type='opencompass.openicl.icl_evaluator.AccEvaluator')),
        infer_cfg=dict(
            ice_template=dict(
                ice_token='</E>',
                template=dict(
                    A=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于大学医学统计的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: A',
                                role='BOT'),
                            ]),
                    B=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于大学医学统计的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: B',
                                role='BOT'),
                            ]),
                    C=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于大学医学统计的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: C',
                                role='BOT'),
                            ]),
                    D=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于大学医学统计的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: D',
                                role='BOT'),
                            ])),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.PPLInferencer'),
            retriever=dict(
                fix_id_list=[
                    0,
                    1,
                    2,
                    3,
                    4,
                    ],
                type='opencompass.openicl.icl_retriever.FixKRetriever')),
        name='college_medical_statistics',
        path='opencompass/cmmlu',
        reader_cfg=dict(
            input_columns=[
                'question',
                'A',
                'B',
                'C',
                'D',
                ],
            output_column='answer',
            test_split='test',
            train_split='dev'),
        type='opencompass.datasets.CMMLUDataset'),
    dict(abbr='cmmlu-college_medicine',
        eval_cfg=dict(
            evaluator=dict(
                type='opencompass.openicl.icl_evaluator.AccEvaluator')),
        infer_cfg=dict(
            ice_template=dict(
                ice_token='</E>',
                template=dict(
                    A=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于大学医学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: A',
                                role='BOT'),
                            ]),
                    B=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于大学医学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: B',
                                role='BOT'),
                            ]),
                    C=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于大学医学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: C',
                                role='BOT'),
                            ]),
                    D=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于大学医学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: D',
                                role='BOT'),
                            ])),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.PPLInferencer'),
            retriever=dict(
                fix_id_list=[
                    0,
                    1,
                    2,
                    3,
                    4,
                    ],
                type='opencompass.openicl.icl_retriever.FixKRetriever')),
        name='college_medicine',
        path='opencompass/cmmlu',
        reader_cfg=dict(
            input_columns=[
                'question',
                'A',
                'B',
                'C',
                'D',
                ],
            output_column='answer',
            test_split='test',
            train_split='dev'),
        type='opencompass.datasets.CMMLUDataset'),
    dict(abbr='cmmlu-computer_science',
        eval_cfg=dict(
            evaluator=dict(
                type='opencompass.openicl.icl_evaluator.AccEvaluator')),
        infer_cfg=dict(
            ice_template=dict(
                ice_token='</E>',
                template=dict(
                    A=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于计算机科学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: A',
                                role='BOT'),
                            ]),
                    B=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于计算机科学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: B',
                                role='BOT'),
                            ]),
                    C=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于计算机科学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: C',
                                role='BOT'),
                            ]),
                    D=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于计算机科学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: D',
                                role='BOT'),
                            ])),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.PPLInferencer'),
            retriever=dict(
                fix_id_list=[
                    0,
                    1,
                    2,
                    3,
                    4,
                    ],
                type='opencompass.openicl.icl_retriever.FixKRetriever')),
        name='computer_science',
        path='opencompass/cmmlu',
        reader_cfg=dict(
            input_columns=[
                'question',
                'A',
                'B',
                'C',
                'D',
                ],
            output_column='answer',
            test_split='test',
            train_split='dev'),
        type='opencompass.datasets.CMMLUDataset'),
    dict(abbr='cmmlu-computer_security',
        eval_cfg=dict(
            evaluator=dict(
                type='opencompass.openicl.icl_evaluator.AccEvaluator')),
        infer_cfg=dict(
            ice_template=dict(
                ice_token='</E>',
                template=dict(
                    A=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于计算机安全的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: A',
                                role='BOT'),
                            ]),
                    B=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于计算机安全的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: B',
                                role='BOT'),
                            ]),
                    C=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于计算机安全的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: C',
                                role='BOT'),
                            ]),
                    D=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于计算机安全的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: D',
                                role='BOT'),
                            ])),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.PPLInferencer'),
            retriever=dict(
                fix_id_list=[
                    0,
                    1,
                    2,
                    3,
                    4,
                    ],
                type='opencompass.openicl.icl_retriever.FixKRetriever')),
        name='computer_security',
        path='opencompass/cmmlu',
        reader_cfg=dict(
            input_columns=[
                'question',
                'A',
                'B',
                'C',
                'D',
                ],
            output_column='answer',
            test_split='test',
            train_split='dev'),
        type='opencompass.datasets.CMMLUDataset'),
    dict(abbr='cmmlu-conceptual_physics',
        eval_cfg=dict(
            evaluator=dict(
                type='opencompass.openicl.icl_evaluator.AccEvaluator')),
        infer_cfg=dict(
            ice_template=dict(
                ice_token='</E>',
                template=dict(
                    A=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于概念物理学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: A',
                                role='BOT'),
                            ]),
                    B=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于概念物理学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: B',
                                role='BOT'),
                            ]),
                    C=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于概念物理学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: C',
                                role='BOT'),
                            ]),
                    D=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于概念物理学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: D',
                                role='BOT'),
                            ])),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.PPLInferencer'),
            retriever=dict(
                fix_id_list=[
                    0,
                    1,
                    2,
                    3,
                    4,
                    ],
                type='opencompass.openicl.icl_retriever.FixKRetriever')),
        name='conceptual_physics',
        path='opencompass/cmmlu',
        reader_cfg=dict(
            input_columns=[
                'question',
                'A',
                'B',
                'C',
                'D',
                ],
            output_column='answer',
            test_split='test',
            train_split='dev'),
        type='opencompass.datasets.CMMLUDataset'),
    dict(abbr='cmmlu-construction_project_management',
        eval_cfg=dict(
            evaluator=dict(
                type='opencompass.openicl.icl_evaluator.AccEvaluator')),
        infer_cfg=dict(
            ice_template=dict(
                ice_token='</E>',
                template=dict(
                    A=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于建设工程管理的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: A',
                                role='BOT'),
                            ]),
                    B=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于建设工程管理的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: B',
                                role='BOT'),
                            ]),
                    C=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于建设工程管理的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: C',
                                role='BOT'),
                            ]),
                    D=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于建设工程管理的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: D',
                                role='BOT'),
                            ])),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.PPLInferencer'),
            retriever=dict(
                fix_id_list=[
                    0,
                    1,
                    2,
                    3,
                    4,
                    ],
                type='opencompass.openicl.icl_retriever.FixKRetriever')),
        name='construction_project_management',
        path='opencompass/cmmlu',
        reader_cfg=dict(
            input_columns=[
                'question',
                'A',
                'B',
                'C',
                'D',
                ],
            output_column='answer',
            test_split='test',
            train_split='dev'),
        type='opencompass.datasets.CMMLUDataset'),
    dict(abbr='cmmlu-economics',
        eval_cfg=dict(
            evaluator=dict(
                type='opencompass.openicl.icl_evaluator.AccEvaluator')),
        infer_cfg=dict(
            ice_template=dict(
                ice_token='</E>',
                template=dict(
                    A=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于经济学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: A',
                                role='BOT'),
                            ]),
                    B=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于经济学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: B',
                                role='BOT'),
                            ]),
                    C=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于经济学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: C',
                                role='BOT'),
                            ]),
                    D=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于经济学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: D',
                                role='BOT'),
                            ])),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.PPLInferencer'),
            retriever=dict(
                fix_id_list=[
                    0,
                    1,
                    2,
                    3,
                    4,
                    ],
                type='opencompass.openicl.icl_retriever.FixKRetriever')),
        name='economics',
        path='opencompass/cmmlu',
        reader_cfg=dict(
            input_columns=[
                'question',
                'A',
                'B',
                'C',
                'D',
                ],
            output_column='answer',
            test_split='test',
            train_split='dev'),
        type='opencompass.datasets.CMMLUDataset'),
    dict(abbr='cmmlu-education',
        eval_cfg=dict(
            evaluator=dict(
                type='opencompass.openicl.icl_evaluator.AccEvaluator')),
        infer_cfg=dict(
            ice_template=dict(
                ice_token='</E>',
                template=dict(
                    A=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于教育学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: A',
                                role='BOT'),
                            ]),
                    B=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于教育学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: B',
                                role='BOT'),
                            ]),
                    C=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于教育学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: C',
                                role='BOT'),
                            ]),
                    D=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于教育学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: D',
                                role='BOT'),
                            ])),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.PPLInferencer'),
            retriever=dict(
                fix_id_list=[
                    0,
                    1,
                    2,
                    3,
                    4,
                    ],
                type='opencompass.openicl.icl_retriever.FixKRetriever')),
        name='education',
        path='opencompass/cmmlu',
        reader_cfg=dict(
            input_columns=[
                'question',
                'A',
                'B',
                'C',
                'D',
                ],
            output_column='answer',
            test_split='test',
            train_split='dev'),
        type='opencompass.datasets.CMMLUDataset'),
    dict(abbr='cmmlu-electrical_engineering',
        eval_cfg=dict(
            evaluator=dict(
                type='opencompass.openicl.icl_evaluator.AccEvaluator')),
        infer_cfg=dict(
            ice_template=dict(
                ice_token='</E>',
                template=dict(
                    A=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于电气工程的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: A',
                                role='BOT'),
                            ]),
                    B=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于电气工程的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: B',
                                role='BOT'),
                            ]),
                    C=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于电气工程的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: C',
                                role='BOT'),
                            ]),
                    D=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于电气工程的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: D',
                                role='BOT'),
                            ])),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.PPLInferencer'),
            retriever=dict(
                fix_id_list=[
                    0,
                    1,
                    2,
                    3,
                    4,
                    ],
                type='opencompass.openicl.icl_retriever.FixKRetriever')),
        name='electrical_engineering',
        path='opencompass/cmmlu',
        reader_cfg=dict(
            input_columns=[
                'question',
                'A',
                'B',
                'C',
                'D',
                ],
            output_column='answer',
            test_split='test',
            train_split='dev'),
        type='opencompass.datasets.CMMLUDataset'),
    dict(abbr='cmmlu-elementary_chinese',
        eval_cfg=dict(
            evaluator=dict(
                type='opencompass.openicl.icl_evaluator.AccEvaluator')),
        infer_cfg=dict(
            ice_template=dict(
                ice_token='</E>',
                template=dict(
                    A=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于小学语文的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: A',
                                role='BOT'),
                            ]),
                    B=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于小学语文的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: B',
                                role='BOT'),
                            ]),
                    C=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于小学语文的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: C',
                                role='BOT'),
                            ]),
                    D=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于小学语文的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: D',
                                role='BOT'),
                            ])),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.PPLInferencer'),
            retriever=dict(
                fix_id_list=[
                    0,
                    1,
                    2,
                    3,
                    4,
                    ],
                type='opencompass.openicl.icl_retriever.FixKRetriever')),
        name='elementary_chinese',
        path='opencompass/cmmlu',
        reader_cfg=dict(
            input_columns=[
                'question',
                'A',
                'B',
                'C',
                'D',
                ],
            output_column='answer',
            test_split='test',
            train_split='dev'),
        type='opencompass.datasets.CMMLUDataset'),
    dict(abbr='cmmlu-elementary_commonsense',
        eval_cfg=dict(
            evaluator=dict(
                type='opencompass.openicl.icl_evaluator.AccEvaluator')),
        infer_cfg=dict(
            ice_template=dict(
                ice_token='</E>',
                template=dict(
                    A=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于小学常识的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: A',
                                role='BOT'),
                            ]),
                    B=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于小学常识的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: B',
                                role='BOT'),
                            ]),
                    C=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于小学常识的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: C',
                                role='BOT'),
                            ]),
                    D=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于小学常识的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: D',
                                role='BOT'),
                            ])),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.PPLInferencer'),
            retriever=dict(
                fix_id_list=[
                    0,
                    1,
                    2,
                    3,
                    4,
                    ],
                type='opencompass.openicl.icl_retriever.FixKRetriever')),
        name='elementary_commonsense',
        path='opencompass/cmmlu',
        reader_cfg=dict(
            input_columns=[
                'question',
                'A',
                'B',
                'C',
                'D',
                ],
            output_column='answer',
            test_split='test',
            train_split='dev'),
        type='opencompass.datasets.CMMLUDataset'),
    dict(abbr='cmmlu-elementary_information_and_technology',
        eval_cfg=dict(
            evaluator=dict(
                type='opencompass.openicl.icl_evaluator.AccEvaluator')),
        infer_cfg=dict(
            ice_template=dict(
                ice_token='</E>',
                template=dict(
                    A=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于小学信息技术的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: A',
                                role='BOT'),
                            ]),
                    B=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于小学信息技术的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: B',
                                role='BOT'),
                            ]),
                    C=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于小学信息技术的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: C',
                                role='BOT'),
                            ]),
                    D=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于小学信息技术的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: D',
                                role='BOT'),
                            ])),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.PPLInferencer'),
            retriever=dict(
                fix_id_list=[
                    0,
                    1,
                    2,
                    3,
                    4,
                    ],
                type='opencompass.openicl.icl_retriever.FixKRetriever')),
        name='elementary_information_and_technology',
        path='opencompass/cmmlu',
        reader_cfg=dict(
            input_columns=[
                'question',
                'A',
                'B',
                'C',
                'D',
                ],
            output_column='answer',
            test_split='test',
            train_split='dev'),
        type='opencompass.datasets.CMMLUDataset'),
    dict(abbr='cmmlu-elementary_mathematics',
        eval_cfg=dict(
            evaluator=dict(
                type='opencompass.openicl.icl_evaluator.AccEvaluator')),
        infer_cfg=dict(
            ice_template=dict(
                ice_token='</E>',
                template=dict(
                    A=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于初等数学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: A',
                                role='BOT'),
                            ]),
                    B=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于初等数学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: B',
                                role='BOT'),
                            ]),
                    C=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于初等数学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: C',
                                role='BOT'),
                            ]),
                    D=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于初等数学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: D',
                                role='BOT'),
                            ])),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.PPLInferencer'),
            retriever=dict(
                fix_id_list=[
                    0,
                    1,
                    2,
                    3,
                    4,
                    ],
                type='opencompass.openicl.icl_retriever.FixKRetriever')),
        name='elementary_mathematics',
        path='opencompass/cmmlu',
        reader_cfg=dict(
            input_columns=[
                'question',
                'A',
                'B',
                'C',
                'D',
                ],
            output_column='answer',
            test_split='test',
            train_split='dev'),
        type='opencompass.datasets.CMMLUDataset'),
    dict(abbr='cmmlu-ethnology',
        eval_cfg=dict(
            evaluator=dict(
                type='opencompass.openicl.icl_evaluator.AccEvaluator')),
        infer_cfg=dict(
            ice_template=dict(
                ice_token='</E>',
                template=dict(
                    A=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于民族学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: A',
                                role='BOT'),
                            ]),
                    B=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于民族学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: B',
                                role='BOT'),
                            ]),
                    C=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于民族学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: C',
                                role='BOT'),
                            ]),
                    D=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于民族学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: D',
                                role='BOT'),
                            ])),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.PPLInferencer'),
            retriever=dict(
                fix_id_list=[
                    0,
                    1,
                    2,
                    3,
                    4,
                    ],
                type='opencompass.openicl.icl_retriever.FixKRetriever')),
        name='ethnology',
        path='opencompass/cmmlu',
        reader_cfg=dict(
            input_columns=[
                'question',
                'A',
                'B',
                'C',
                'D',
                ],
            output_column='answer',
            test_split='test',
            train_split='dev'),
        type='opencompass.datasets.CMMLUDataset'),
    dict(abbr='cmmlu-food_science',
        eval_cfg=dict(
            evaluator=dict(
                type='opencompass.openicl.icl_evaluator.AccEvaluator')),
        infer_cfg=dict(
            ice_template=dict(
                ice_token='</E>',
                template=dict(
                    A=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于食品科学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: A',
                                role='BOT'),
                            ]),
                    B=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于食品科学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: B',
                                role='BOT'),
                            ]),
                    C=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于食品科学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: C',
                                role='BOT'),
                            ]),
                    D=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于食品科学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: D',
                                role='BOT'),
                            ])),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.PPLInferencer'),
            retriever=dict(
                fix_id_list=[
                    0,
                    1,
                    2,
                    3,
                    4,
                    ],
                type='opencompass.openicl.icl_retriever.FixKRetriever')),
        name='food_science',
        path='opencompass/cmmlu',
        reader_cfg=dict(
            input_columns=[
                'question',
                'A',
                'B',
                'C',
                'D',
                ],
            output_column='answer',
            test_split='test',
            train_split='dev'),
        type='opencompass.datasets.CMMLUDataset'),
    dict(abbr='cmmlu-genetics',
        eval_cfg=dict(
            evaluator=dict(
                type='opencompass.openicl.icl_evaluator.AccEvaluator')),
        infer_cfg=dict(
            ice_template=dict(
                ice_token='</E>',
                template=dict(
                    A=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于遗传学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: A',
                                role='BOT'),
                            ]),
                    B=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于遗传学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: B',
                                role='BOT'),
                            ]),
                    C=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于遗传学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: C',
                                role='BOT'),
                            ]),
                    D=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于遗传学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: D',
                                role='BOT'),
                            ])),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.PPLInferencer'),
            retriever=dict(
                fix_id_list=[
                    0,
                    1,
                    2,
                    3,
                    4,
                    ],
                type='opencompass.openicl.icl_retriever.FixKRetriever')),
        name='genetics',
        path='opencompass/cmmlu',
        reader_cfg=dict(
            input_columns=[
                'question',
                'A',
                'B',
                'C',
                'D',
                ],
            output_column='answer',
            test_split='test',
            train_split='dev'),
        type='opencompass.datasets.CMMLUDataset'),
    dict(abbr='cmmlu-global_facts',
        eval_cfg=dict(
            evaluator=dict(
                type='opencompass.openicl.icl_evaluator.AccEvaluator')),
        infer_cfg=dict(
            ice_template=dict(
                ice_token='</E>',
                template=dict(
                    A=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于全球事实的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: A',
                                role='BOT'),
                            ]),
                    B=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于全球事实的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: B',
                                role='BOT'),
                            ]),
                    C=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于全球事实的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: C',
                                role='BOT'),
                            ]),
                    D=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于全球事实的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: D',
                                role='BOT'),
                            ])),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.PPLInferencer'),
            retriever=dict(
                fix_id_list=[
                    0,
                    1,
                    2,
                    3,
                    4,
                    ],
                type='opencompass.openicl.icl_retriever.FixKRetriever')),
        name='global_facts',
        path='opencompass/cmmlu',
        reader_cfg=dict(
            input_columns=[
                'question',
                'A',
                'B',
                'C',
                'D',
                ],
            output_column='answer',
            test_split='test',
            train_split='dev'),
        type='opencompass.datasets.CMMLUDataset'),
    dict(abbr='cmmlu-high_school_biology',
        eval_cfg=dict(
            evaluator=dict(
                type='opencompass.openicl.icl_evaluator.AccEvaluator')),
        infer_cfg=dict(
            ice_template=dict(
                ice_token='</E>',
                template=dict(
                    A=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于高中生物的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: A',
                                role='BOT'),
                            ]),
                    B=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于高中生物的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: B',
                                role='BOT'),
                            ]),
                    C=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于高中生物的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: C',
                                role='BOT'),
                            ]),
                    D=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于高中生物的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: D',
                                role='BOT'),
                            ])),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.PPLInferencer'),
            retriever=dict(
                fix_id_list=[
                    0,
                    1,
                    2,
                    3,
                    4,
                    ],
                type='opencompass.openicl.icl_retriever.FixKRetriever')),
        name='high_school_biology',
        path='opencompass/cmmlu',
        reader_cfg=dict(
            input_columns=[
                'question',
                'A',
                'B',
                'C',
                'D',
                ],
            output_column='answer',
            test_split='test',
            train_split='dev'),
        type='opencompass.datasets.CMMLUDataset'),
    dict(abbr='cmmlu-high_school_chemistry',
        eval_cfg=dict(
            evaluator=dict(
                type='opencompass.openicl.icl_evaluator.AccEvaluator')),
        infer_cfg=dict(
            ice_template=dict(
                ice_token='</E>',
                template=dict(
                    A=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于高中化学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: A',
                                role='BOT'),
                            ]),
                    B=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于高中化学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: B',
                                role='BOT'),
                            ]),
                    C=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于高中化学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: C',
                                role='BOT'),
                            ]),
                    D=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于高中化学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: D',
                                role='BOT'),
                            ])),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.PPLInferencer'),
            retriever=dict(
                fix_id_list=[
                    0,
                    1,
                    2,
                    3,
                    4,
                    ],
                type='opencompass.openicl.icl_retriever.FixKRetriever')),
        name='high_school_chemistry',
        path='opencompass/cmmlu',
        reader_cfg=dict(
            input_columns=[
                'question',
                'A',
                'B',
                'C',
                'D',
                ],
            output_column='answer',
            test_split='test',
            train_split='dev'),
        type='opencompass.datasets.CMMLUDataset'),
    dict(abbr='cmmlu-high_school_geography',
        eval_cfg=dict(
            evaluator=dict(
                type='opencompass.openicl.icl_evaluator.AccEvaluator')),
        infer_cfg=dict(
            ice_template=dict(
                ice_token='</E>',
                template=dict(
                    A=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于高中地理的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: A',
                                role='BOT'),
                            ]),
                    B=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于高中地理的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: B',
                                role='BOT'),
                            ]),
                    C=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于高中地理的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: C',
                                role='BOT'),
                            ]),
                    D=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于高中地理的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: D',
                                role='BOT'),
                            ])),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.PPLInferencer'),
            retriever=dict(
                fix_id_list=[
                    0,
                    1,
                    2,
                    3,
                    4,
                    ],
                type='opencompass.openicl.icl_retriever.FixKRetriever')),
        name='high_school_geography',
        path='opencompass/cmmlu',
        reader_cfg=dict(
            input_columns=[
                'question',
                'A',
                'B',
                'C',
                'D',
                ],
            output_column='answer',
            test_split='test',
            train_split='dev'),
        type='opencompass.datasets.CMMLUDataset'),
    dict(abbr='cmmlu-high_school_mathematics',
        eval_cfg=dict(
            evaluator=dict(
                type='opencompass.openicl.icl_evaluator.AccEvaluator')),
        infer_cfg=dict(
            ice_template=dict(
                ice_token='</E>',
                template=dict(
                    A=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于高中数学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: A',
                                role='BOT'),
                            ]),
                    B=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于高中数学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: B',
                                role='BOT'),
                            ]),
                    C=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于高中数学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: C',
                                role='BOT'),
                            ]),
                    D=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于高中数学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: D',
                                role='BOT'),
                            ])),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.PPLInferencer'),
            retriever=dict(
                fix_id_list=[
                    0,
                    1,
                    2,
                    3,
                    4,
                    ],
                type='opencompass.openicl.icl_retriever.FixKRetriever')),
        name='high_school_mathematics',
        path='opencompass/cmmlu',
        reader_cfg=dict(
            input_columns=[
                'question',
                'A',
                'B',
                'C',
                'D',
                ],
            output_column='answer',
            test_split='test',
            train_split='dev'),
        type='opencompass.datasets.CMMLUDataset'),
    dict(abbr='cmmlu-high_school_physics',
        eval_cfg=dict(
            evaluator=dict(
                type='opencompass.openicl.icl_evaluator.AccEvaluator')),
        infer_cfg=dict(
            ice_template=dict(
                ice_token='</E>',
                template=dict(
                    A=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于高中物理学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: A',
                                role='BOT'),
                            ]),
                    B=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于高中物理学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: B',
                                role='BOT'),
                            ]),
                    C=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于高中物理学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: C',
                                role='BOT'),
                            ]),
                    D=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于高中物理学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: D',
                                role='BOT'),
                            ])),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.PPLInferencer'),
            retriever=dict(
                fix_id_list=[
                    0,
                    1,
                    2,
                    3,
                    4,
                    ],
                type='opencompass.openicl.icl_retriever.FixKRetriever')),
        name='high_school_physics',
        path='opencompass/cmmlu',
        reader_cfg=dict(
            input_columns=[
                'question',
                'A',
                'B',
                'C',
                'D',
                ],
            output_column='answer',
            test_split='test',
            train_split='dev'),
        type='opencompass.datasets.CMMLUDataset'),
    dict(abbr='cmmlu-high_school_politics',
        eval_cfg=dict(
            evaluator=dict(
                type='opencompass.openicl.icl_evaluator.AccEvaluator')),
        infer_cfg=dict(
            ice_template=dict(
                ice_token='</E>',
                template=dict(
                    A=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于高中政治的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: A',
                                role='BOT'),
                            ]),
                    B=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于高中政治的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: B',
                                role='BOT'),
                            ]),
                    C=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于高中政治的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: C',
                                role='BOT'),
                            ]),
                    D=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于高中政治的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: D',
                                role='BOT'),
                            ])),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.PPLInferencer'),
            retriever=dict(
                fix_id_list=[
                    0,
                    1,
                    2,
                    3,
                    4,
                    ],
                type='opencompass.openicl.icl_retriever.FixKRetriever')),
        name='high_school_politics',
        path='opencompass/cmmlu',
        reader_cfg=dict(
            input_columns=[
                'question',
                'A',
                'B',
                'C',
                'D',
                ],
            output_column='answer',
            test_split='test',
            train_split='dev'),
        type='opencompass.datasets.CMMLUDataset'),
    dict(abbr='cmmlu-human_sexuality',
        eval_cfg=dict(
            evaluator=dict(
                type='opencompass.openicl.icl_evaluator.AccEvaluator')),
        infer_cfg=dict(
            ice_template=dict(
                ice_token='</E>',
                template=dict(
                    A=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于人类性行为的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: A',
                                role='BOT'),
                            ]),
                    B=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于人类性行为的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: B',
                                role='BOT'),
                            ]),
                    C=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于人类性行为的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: C',
                                role='BOT'),
                            ]),
                    D=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于人类性行为的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: D',
                                role='BOT'),
                            ])),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.PPLInferencer'),
            retriever=dict(
                fix_id_list=[
                    0,
                    1,
                    2,
                    3,
                    4,
                    ],
                type='opencompass.openicl.icl_retriever.FixKRetriever')),
        name='human_sexuality',
        path='opencompass/cmmlu',
        reader_cfg=dict(
            input_columns=[
                'question',
                'A',
                'B',
                'C',
                'D',
                ],
            output_column='answer',
            test_split='test',
            train_split='dev'),
        type='opencompass.datasets.CMMLUDataset'),
    dict(abbr='cmmlu-international_law',
        eval_cfg=dict(
            evaluator=dict(
                type='opencompass.openicl.icl_evaluator.AccEvaluator')),
        infer_cfg=dict(
            ice_template=dict(
                ice_token='</E>',
                template=dict(
                    A=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于国际法学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: A',
                                role='BOT'),
                            ]),
                    B=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于国际法学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: B',
                                role='BOT'),
                            ]),
                    C=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于国际法学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: C',
                                role='BOT'),
                            ]),
                    D=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于国际法学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: D',
                                role='BOT'),
                            ])),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.PPLInferencer'),
            retriever=dict(
                fix_id_list=[
                    0,
                    1,
                    2,
                    3,
                    4,
                    ],
                type='opencompass.openicl.icl_retriever.FixKRetriever')),
        name='international_law',
        path='opencompass/cmmlu',
        reader_cfg=dict(
            input_columns=[
                'question',
                'A',
                'B',
                'C',
                'D',
                ],
            output_column='answer',
            test_split='test',
            train_split='dev'),
        type='opencompass.datasets.CMMLUDataset'),
    dict(abbr='cmmlu-journalism',
        eval_cfg=dict(
            evaluator=dict(
                type='opencompass.openicl.icl_evaluator.AccEvaluator')),
        infer_cfg=dict(
            ice_template=dict(
                ice_token='</E>',
                template=dict(
                    A=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于新闻学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: A',
                                role='BOT'),
                            ]),
                    B=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于新闻学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: B',
                                role='BOT'),
                            ]),
                    C=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于新闻学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: C',
                                role='BOT'),
                            ]),
                    D=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于新闻学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: D',
                                role='BOT'),
                            ])),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.PPLInferencer'),
            retriever=dict(
                fix_id_list=[
                    0,
                    1,
                    2,
                    3,
                    4,
                    ],
                type='opencompass.openicl.icl_retriever.FixKRetriever')),
        name='journalism',
        path='opencompass/cmmlu',
        reader_cfg=dict(
            input_columns=[
                'question',
                'A',
                'B',
                'C',
                'D',
                ],
            output_column='answer',
            test_split='test',
            train_split='dev'),
        type='opencompass.datasets.CMMLUDataset'),
    dict(abbr='cmmlu-jurisprudence',
        eval_cfg=dict(
            evaluator=dict(
                type='opencompass.openicl.icl_evaluator.AccEvaluator')),
        infer_cfg=dict(
            ice_template=dict(
                ice_token='</E>',
                template=dict(
                    A=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于法理学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: A',
                                role='BOT'),
                            ]),
                    B=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于法理学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: B',
                                role='BOT'),
                            ]),
                    C=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于法理学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: C',
                                role='BOT'),
                            ]),
                    D=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于法理学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: D',
                                role='BOT'),
                            ])),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.PPLInferencer'),
            retriever=dict(
                fix_id_list=[
                    0,
                    1,
                    2,
                    3,
                    4,
                    ],
                type='opencompass.openicl.icl_retriever.FixKRetriever')),
        name='jurisprudence',
        path='opencompass/cmmlu',
        reader_cfg=dict(
            input_columns=[
                'question',
                'A',
                'B',
                'C',
                'D',
                ],
            output_column='answer',
            test_split='test',
            train_split='dev'),
        type='opencompass.datasets.CMMLUDataset'),
    dict(abbr='cmmlu-legal_and_moral_basis',
        eval_cfg=dict(
            evaluator=dict(
                type='opencompass.openicl.icl_evaluator.AccEvaluator')),
        infer_cfg=dict(
            ice_template=dict(
                ice_token='</E>',
                template=dict(
                    A=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于法律与道德基础的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: A',
                                role='BOT'),
                            ]),
                    B=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于法律与道德基础的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: B',
                                role='BOT'),
                            ]),
                    C=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于法律与道德基础的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: C',
                                role='BOT'),
                            ]),
                    D=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于法律与道德基础的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: D',
                                role='BOT'),
                            ])),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.PPLInferencer'),
            retriever=dict(
                fix_id_list=[
                    0,
                    1,
                    2,
                    3,
                    4,
                    ],
                type='opencompass.openicl.icl_retriever.FixKRetriever')),
        name='legal_and_moral_basis',
        path='opencompass/cmmlu',
        reader_cfg=dict(
            input_columns=[
                'question',
                'A',
                'B',
                'C',
                'D',
                ],
            output_column='answer',
            test_split='test',
            train_split='dev'),
        type='opencompass.datasets.CMMLUDataset'),
    dict(abbr='cmmlu-logical',
        eval_cfg=dict(
            evaluator=dict(
                type='opencompass.openicl.icl_evaluator.AccEvaluator')),
        infer_cfg=dict(
            ice_template=dict(
                ice_token='</E>',
                template=dict(
                    A=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于逻辑学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: A',
                                role='BOT'),
                            ]),
                    B=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于逻辑学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: B',
                                role='BOT'),
                            ]),
                    C=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于逻辑学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: C',
                                role='BOT'),
                            ]),
                    D=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于逻辑学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: D',
                                role='BOT'),
                            ])),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.PPLInferencer'),
            retriever=dict(
                fix_id_list=[
                    0,
                    1,
                    2,
                    3,
                    4,
                    ],
                type='opencompass.openicl.icl_retriever.FixKRetriever')),
        name='logical',
        path='opencompass/cmmlu',
        reader_cfg=dict(
            input_columns=[
                'question',
                'A',
                'B',
                'C',
                'D',
                ],
            output_column='answer',
            test_split='test',
            train_split='dev'),
        type='opencompass.datasets.CMMLUDataset'),
    dict(abbr='cmmlu-machine_learning',
        eval_cfg=dict(
            evaluator=dict(
                type='opencompass.openicl.icl_evaluator.AccEvaluator')),
        infer_cfg=dict(
            ice_template=dict(
                ice_token='</E>',
                template=dict(
                    A=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于机器学习的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: A',
                                role='BOT'),
                            ]),
                    B=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于机器学习的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: B',
                                role='BOT'),
                            ]),
                    C=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于机器学习的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: C',
                                role='BOT'),
                            ]),
                    D=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于机器学习的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: D',
                                role='BOT'),
                            ])),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.PPLInferencer'),
            retriever=dict(
                fix_id_list=[
                    0,
                    1,
                    2,
                    3,
                    4,
                    ],
                type='opencompass.openicl.icl_retriever.FixKRetriever')),
        name='machine_learning',
        path='opencompass/cmmlu',
        reader_cfg=dict(
            input_columns=[
                'question',
                'A',
                'B',
                'C',
                'D',
                ],
            output_column='answer',
            test_split='test',
            train_split='dev'),
        type='opencompass.datasets.CMMLUDataset'),
    dict(abbr='cmmlu-management',
        eval_cfg=dict(
            evaluator=dict(
                type='opencompass.openicl.icl_evaluator.AccEvaluator')),
        infer_cfg=dict(
            ice_template=dict(
                ice_token='</E>',
                template=dict(
                    A=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于管理学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: A',
                                role='BOT'),
                            ]),
                    B=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于管理学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: B',
                                role='BOT'),
                            ]),
                    C=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于管理学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: C',
                                role='BOT'),
                            ]),
                    D=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于管理学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: D',
                                role='BOT'),
                            ])),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.PPLInferencer'),
            retriever=dict(
                fix_id_list=[
                    0,
                    1,
                    2,
                    3,
                    4,
                    ],
                type='opencompass.openicl.icl_retriever.FixKRetriever')),
        name='management',
        path='opencompass/cmmlu',
        reader_cfg=dict(
            input_columns=[
                'question',
                'A',
                'B',
                'C',
                'D',
                ],
            output_column='answer',
            test_split='test',
            train_split='dev'),
        type='opencompass.datasets.CMMLUDataset'),
    dict(abbr='cmmlu-marketing',
        eval_cfg=dict(
            evaluator=dict(
                type='opencompass.openicl.icl_evaluator.AccEvaluator')),
        infer_cfg=dict(
            ice_template=dict(
                ice_token='</E>',
                template=dict(
                    A=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于市场营销的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: A',
                                role='BOT'),
                            ]),
                    B=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于市场营销的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: B',
                                role='BOT'),
                            ]),
                    C=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于市场营销的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: C',
                                role='BOT'),
                            ]),
                    D=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于市场营销的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: D',
                                role='BOT'),
                            ])),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.PPLInferencer'),
            retriever=dict(
                fix_id_list=[
                    0,
                    1,
                    2,
                    3,
                    4,
                    ],
                type='opencompass.openicl.icl_retriever.FixKRetriever')),
        name='marketing',
        path='opencompass/cmmlu',
        reader_cfg=dict(
            input_columns=[
                'question',
                'A',
                'B',
                'C',
                'D',
                ],
            output_column='answer',
            test_split='test',
            train_split='dev'),
        type='opencompass.datasets.CMMLUDataset'),
    dict(abbr='cmmlu-marxist_theory',
        eval_cfg=dict(
            evaluator=dict(
                type='opencompass.openicl.icl_evaluator.AccEvaluator')),
        infer_cfg=dict(
            ice_template=dict(
                ice_token='</E>',
                template=dict(
                    A=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于马克思主义理论的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: A',
                                role='BOT'),
                            ]),
                    B=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于马克思主义理论的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: B',
                                role='BOT'),
                            ]),
                    C=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于马克思主义理论的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: C',
                                role='BOT'),
                            ]),
                    D=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于马克思主义理论的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: D',
                                role='BOT'),
                            ])),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.PPLInferencer'),
            retriever=dict(
                fix_id_list=[
                    0,
                    1,
                    2,
                    3,
                    4,
                    ],
                type='opencompass.openicl.icl_retriever.FixKRetriever')),
        name='marxist_theory',
        path='opencompass/cmmlu',
        reader_cfg=dict(
            input_columns=[
                'question',
                'A',
                'B',
                'C',
                'D',
                ],
            output_column='answer',
            test_split='test',
            train_split='dev'),
        type='opencompass.datasets.CMMLUDataset'),
    dict(abbr='cmmlu-modern_chinese',
        eval_cfg=dict(
            evaluator=dict(
                type='opencompass.openicl.icl_evaluator.AccEvaluator')),
        infer_cfg=dict(
            ice_template=dict(
                ice_token='</E>',
                template=dict(
                    A=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于现代汉语的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: A',
                                role='BOT'),
                            ]),
                    B=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于现代汉语的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: B',
                                role='BOT'),
                            ]),
                    C=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于现代汉语的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: C',
                                role='BOT'),
                            ]),
                    D=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于现代汉语的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: D',
                                role='BOT'),
                            ])),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.PPLInferencer'),
            retriever=dict(
                fix_id_list=[
                    0,
                    1,
                    2,
                    3,
                    4,
                    ],
                type='opencompass.openicl.icl_retriever.FixKRetriever')),
        name='modern_chinese',
        path='opencompass/cmmlu',
        reader_cfg=dict(
            input_columns=[
                'question',
                'A',
                'B',
                'C',
                'D',
                ],
            output_column='answer',
            test_split='test',
            train_split='dev'),
        type='opencompass.datasets.CMMLUDataset'),
    dict(abbr='cmmlu-nutrition',
        eval_cfg=dict(
            evaluator=dict(
                type='opencompass.openicl.icl_evaluator.AccEvaluator')),
        infer_cfg=dict(
            ice_template=dict(
                ice_token='</E>',
                template=dict(
                    A=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于营养学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: A',
                                role='BOT'),
                            ]),
                    B=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于营养学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: B',
                                role='BOT'),
                            ]),
                    C=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于营养学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: C',
                                role='BOT'),
                            ]),
                    D=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于营养学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: D',
                                role='BOT'),
                            ])),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.PPLInferencer'),
            retriever=dict(
                fix_id_list=[
                    0,
                    1,
                    2,
                    3,
                    4,
                    ],
                type='opencompass.openicl.icl_retriever.FixKRetriever')),
        name='nutrition',
        path='opencompass/cmmlu',
        reader_cfg=dict(
            input_columns=[
                'question',
                'A',
                'B',
                'C',
                'D',
                ],
            output_column='answer',
            test_split='test',
            train_split='dev'),
        type='opencompass.datasets.CMMLUDataset'),
    dict(abbr='cmmlu-philosophy',
        eval_cfg=dict(
            evaluator=dict(
                type='opencompass.openicl.icl_evaluator.AccEvaluator')),
        infer_cfg=dict(
            ice_template=dict(
                ice_token='</E>',
                template=dict(
                    A=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于哲学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: A',
                                role='BOT'),
                            ]),
                    B=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于哲学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: B',
                                role='BOT'),
                            ]),
                    C=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于哲学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: C',
                                role='BOT'),
                            ]),
                    D=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于哲学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: D',
                                role='BOT'),
                            ])),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.PPLInferencer'),
            retriever=dict(
                fix_id_list=[
                    0,
                    1,
                    2,
                    3,
                    4,
                    ],
                type='opencompass.openicl.icl_retriever.FixKRetriever')),
        name='philosophy',
        path='opencompass/cmmlu',
        reader_cfg=dict(
            input_columns=[
                'question',
                'A',
                'B',
                'C',
                'D',
                ],
            output_column='answer',
            test_split='test',
            train_split='dev'),
        type='opencompass.datasets.CMMLUDataset'),
    dict(abbr='cmmlu-professional_accounting',
        eval_cfg=dict(
            evaluator=dict(
                type='opencompass.openicl.icl_evaluator.AccEvaluator')),
        infer_cfg=dict(
            ice_template=dict(
                ice_token='</E>',
                template=dict(
                    A=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于专业会计的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: A',
                                role='BOT'),
                            ]),
                    B=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于专业会计的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: B',
                                role='BOT'),
                            ]),
                    C=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于专业会计的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: C',
                                role='BOT'),
                            ]),
                    D=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于专业会计的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: D',
                                role='BOT'),
                            ])),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.PPLInferencer'),
            retriever=dict(
                fix_id_list=[
                    0,
                    1,
                    2,
                    3,
                    4,
                    ],
                type='opencompass.openicl.icl_retriever.FixKRetriever')),
        name='professional_accounting',
        path='opencompass/cmmlu',
        reader_cfg=dict(
            input_columns=[
                'question',
                'A',
                'B',
                'C',
                'D',
                ],
            output_column='answer',
            test_split='test',
            train_split='dev'),
        type='opencompass.datasets.CMMLUDataset'),
    dict(abbr='cmmlu-professional_law',
        eval_cfg=dict(
            evaluator=dict(
                type='opencompass.openicl.icl_evaluator.AccEvaluator')),
        infer_cfg=dict(
            ice_template=dict(
                ice_token='</E>',
                template=dict(
                    A=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于专业法学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: A',
                                role='BOT'),
                            ]),
                    B=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于专业法学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: B',
                                role='BOT'),
                            ]),
                    C=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于专业法学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: C',
                                role='BOT'),
                            ]),
                    D=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于专业法学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: D',
                                role='BOT'),
                            ])),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.PPLInferencer'),
            retriever=dict(
                fix_id_list=[
                    0,
                    1,
                    2,
                    3,
                    4,
                    ],
                type='opencompass.openicl.icl_retriever.FixKRetriever')),
        name='professional_law',
        path='opencompass/cmmlu',
        reader_cfg=dict(
            input_columns=[
                'question',
                'A',
                'B',
                'C',
                'D',
                ],
            output_column='answer',
            test_split='test',
            train_split='dev'),
        type='opencompass.datasets.CMMLUDataset'),
    dict(abbr='cmmlu-professional_medicine',
        eval_cfg=dict(
            evaluator=dict(
                type='opencompass.openicl.icl_evaluator.AccEvaluator')),
        infer_cfg=dict(
            ice_template=dict(
                ice_token='</E>',
                template=dict(
                    A=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于专业医学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: A',
                                role='BOT'),
                            ]),
                    B=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于专业医学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: B',
                                role='BOT'),
                            ]),
                    C=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于专业医学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: C',
                                role='BOT'),
                            ]),
                    D=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于专业医学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: D',
                                role='BOT'),
                            ])),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.PPLInferencer'),
            retriever=dict(
                fix_id_list=[
                    0,
                    1,
                    2,
                    3,
                    4,
                    ],
                type='opencompass.openicl.icl_retriever.FixKRetriever')),
        name='professional_medicine',
        path='opencompass/cmmlu',
        reader_cfg=dict(
            input_columns=[
                'question',
                'A',
                'B',
                'C',
                'D',
                ],
            output_column='answer',
            test_split='test',
            train_split='dev'),
        type='opencompass.datasets.CMMLUDataset'),
    dict(abbr='cmmlu-professional_psychology',
        eval_cfg=dict(
            evaluator=dict(
                type='opencompass.openicl.icl_evaluator.AccEvaluator')),
        infer_cfg=dict(
            ice_template=dict(
                ice_token='</E>',
                template=dict(
                    A=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于专业心理学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: A',
                                role='BOT'),
                            ]),
                    B=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于专业心理学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: B',
                                role='BOT'),
                            ]),
                    C=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于专业心理学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: C',
                                role='BOT'),
                            ]),
                    D=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于专业心理学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: D',
                                role='BOT'),
                            ])),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.PPLInferencer'),
            retriever=dict(
                fix_id_list=[
                    0,
                    1,
                    2,
                    3,
                    4,
                    ],
                type='opencompass.openicl.icl_retriever.FixKRetriever')),
        name='professional_psychology',
        path='opencompass/cmmlu',
        reader_cfg=dict(
            input_columns=[
                'question',
                'A',
                'B',
                'C',
                'D',
                ],
            output_column='answer',
            test_split='test',
            train_split='dev'),
        type='opencompass.datasets.CMMLUDataset'),
    dict(abbr='cmmlu-public_relations',
        eval_cfg=dict(
            evaluator=dict(
                type='opencompass.openicl.icl_evaluator.AccEvaluator')),
        infer_cfg=dict(
            ice_template=dict(
                ice_token='</E>',
                template=dict(
                    A=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于公共关系的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: A',
                                role='BOT'),
                            ]),
                    B=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于公共关系的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: B',
                                role='BOT'),
                            ]),
                    C=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于公共关系的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: C',
                                role='BOT'),
                            ]),
                    D=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于公共关系的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: D',
                                role='BOT'),
                            ])),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.PPLInferencer'),
            retriever=dict(
                fix_id_list=[
                    0,
                    1,
                    2,
                    3,
                    4,
                    ],
                type='opencompass.openicl.icl_retriever.FixKRetriever')),
        name='public_relations',
        path='opencompass/cmmlu',
        reader_cfg=dict(
            input_columns=[
                'question',
                'A',
                'B',
                'C',
                'D',
                ],
            output_column='answer',
            test_split='test',
            train_split='dev'),
        type='opencompass.datasets.CMMLUDataset'),
    dict(abbr='cmmlu-security_study',
        eval_cfg=dict(
            evaluator=dict(
                type='opencompass.openicl.icl_evaluator.AccEvaluator')),
        infer_cfg=dict(
            ice_template=dict(
                ice_token='</E>',
                template=dict(
                    A=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于安全研究的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: A',
                                role='BOT'),
                            ]),
                    B=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于安全研究的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: B',
                                role='BOT'),
                            ]),
                    C=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于安全研究的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: C',
                                role='BOT'),
                            ]),
                    D=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于安全研究的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: D',
                                role='BOT'),
                            ])),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.PPLInferencer'),
            retriever=dict(
                fix_id_list=[
                    0,
                    1,
                    2,
                    3,
                    4,
                    ],
                type='opencompass.openicl.icl_retriever.FixKRetriever')),
        name='security_study',
        path='opencompass/cmmlu',
        reader_cfg=dict(
            input_columns=[
                'question',
                'A',
                'B',
                'C',
                'D',
                ],
            output_column='answer',
            test_split='test',
            train_split='dev'),
        type='opencompass.datasets.CMMLUDataset'),
    dict(abbr='cmmlu-sociology',
        eval_cfg=dict(
            evaluator=dict(
                type='opencompass.openicl.icl_evaluator.AccEvaluator')),
        infer_cfg=dict(
            ice_template=dict(
                ice_token='</E>',
                template=dict(
                    A=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于社会学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: A',
                                role='BOT'),
                            ]),
                    B=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于社会学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: B',
                                role='BOT'),
                            ]),
                    C=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于社会学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: C',
                                role='BOT'),
                            ]),
                    D=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于社会学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: D',
                                role='BOT'),
                            ])),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.PPLInferencer'),
            retriever=dict(
                fix_id_list=[
                    0,
                    1,
                    2,
                    3,
                    4,
                    ],
                type='opencompass.openicl.icl_retriever.FixKRetriever')),
        name='sociology',
        path='opencompass/cmmlu',
        reader_cfg=dict(
            input_columns=[
                'question',
                'A',
                'B',
                'C',
                'D',
                ],
            output_column='answer',
            test_split='test',
            train_split='dev'),
        type='opencompass.datasets.CMMLUDataset'),
    dict(abbr='cmmlu-sports_science',
        eval_cfg=dict(
            evaluator=dict(
                type='opencompass.openicl.icl_evaluator.AccEvaluator')),
        infer_cfg=dict(
            ice_template=dict(
                ice_token='</E>',
                template=dict(
                    A=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于体育学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: A',
                                role='BOT'),
                            ]),
                    B=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于体育学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: B',
                                role='BOT'),
                            ]),
                    C=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于体育学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: C',
                                role='BOT'),
                            ]),
                    D=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于体育学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: D',
                                role='BOT'),
                            ])),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.PPLInferencer'),
            retriever=dict(
                fix_id_list=[
                    0,
                    1,
                    2,
                    3,
                    4,
                    ],
                type='opencompass.openicl.icl_retriever.FixKRetriever')),
        name='sports_science',
        path='opencompass/cmmlu',
        reader_cfg=dict(
            input_columns=[
                'question',
                'A',
                'B',
                'C',
                'D',
                ],
            output_column='answer',
            test_split='test',
            train_split='dev'),
        type='opencompass.datasets.CMMLUDataset'),
    dict(abbr='cmmlu-traditional_chinese_medicine',
        eval_cfg=dict(
            evaluator=dict(
                type='opencompass.openicl.icl_evaluator.AccEvaluator')),
        infer_cfg=dict(
            ice_template=dict(
                ice_token='</E>',
                template=dict(
                    A=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于中医中药的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: A',
                                role='BOT'),
                            ]),
                    B=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于中医中药的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: B',
                                role='BOT'),
                            ]),
                    C=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于中医中药的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: C',
                                role='BOT'),
                            ]),
                    D=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于中医中药的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: D',
                                role='BOT'),
                            ])),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.PPLInferencer'),
            retriever=dict(
                fix_id_list=[
                    0,
                    1,
                    2,
                    3,
                    4,
                    ],
                type='opencompass.openicl.icl_retriever.FixKRetriever')),
        name='traditional_chinese_medicine',
        path='opencompass/cmmlu',
        reader_cfg=dict(
            input_columns=[
                'question',
                'A',
                'B',
                'C',
                'D',
                ],
            output_column='answer',
            test_split='test',
            train_split='dev'),
        type='opencompass.datasets.CMMLUDataset'),
    dict(abbr='cmmlu-virology',
        eval_cfg=dict(
            evaluator=dict(
                type='opencompass.openicl.icl_evaluator.AccEvaluator')),
        infer_cfg=dict(
            ice_template=dict(
                ice_token='</E>',
                template=dict(
                    A=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于病毒学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: A',
                                role='BOT'),
                            ]),
                    B=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于病毒学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: B',
                                role='BOT'),
                            ]),
                    C=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于病毒学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: C',
                                role='BOT'),
                            ]),
                    D=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于病毒学的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: D',
                                role='BOT'),
                            ])),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.PPLInferencer'),
            retriever=dict(
                fix_id_list=[
                    0,
                    1,
                    2,
                    3,
                    4,
                    ],
                type='opencompass.openicl.icl_retriever.FixKRetriever')),
        name='virology',
        path='opencompass/cmmlu',
        reader_cfg=dict(
            input_columns=[
                'question',
                'A',
                'B',
                'C',
                'D',
                ],
            output_column='answer',
            test_split='test',
            train_split='dev'),
        type='opencompass.datasets.CMMLUDataset'),
    dict(abbr='cmmlu-world_history',
        eval_cfg=dict(
            evaluator=dict(
                type='opencompass.openicl.icl_evaluator.AccEvaluator')),
        infer_cfg=dict(
            ice_template=dict(
                ice_token='</E>',
                template=dict(
                    A=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于世界历史的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: A',
                                role='BOT'),
                            ]),
                    B=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于世界历史的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: B',
                                role='BOT'),
                            ]),
                    C=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于世界历史的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: C',
                                role='BOT'),
                            ]),
                    D=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于世界历史的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: D',
                                role='BOT'),
                            ])),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.PPLInferencer'),
            retriever=dict(
                fix_id_list=[
                    0,
                    1,
                    2,
                    3,
                    4,
                    ],
                type='opencompass.openicl.icl_retriever.FixKRetriever')),
        name='world_history',
        path='opencompass/cmmlu',
        reader_cfg=dict(
            input_columns=[
                'question',
                'A',
                'B',
                'C',
                'D',
                ],
            output_column='answer',
            test_split='test',
            train_split='dev'),
        type='opencompass.datasets.CMMLUDataset'),
    dict(abbr='cmmlu-world_religions',
        eval_cfg=dict(
            evaluator=dict(
                type='opencompass.openicl.icl_evaluator.AccEvaluator')),
        infer_cfg=dict(
            ice_template=dict(
                ice_token='</E>',
                template=dict(
                    A=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于世界宗教的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: A',
                                role='BOT'),
                            ]),
                    B=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于世界宗教的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: B',
                                role='BOT'),
                            ]),
                    C=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于世界宗教的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: C',
                                role='BOT'),
                            ]),
                    D=dict(
                        begin='</E>',
                        round=[
                            dict(prompt='以下是关于世界宗教的单项选择题，请直接给出正确答案的选项。\n题目：{question}\nA. {A}\nB. {B}\nC. {C}\nD. {D}',
                                role='HUMAN'),
                            dict(prompt='答案是: D',
                                role='BOT'),
                            ])),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.PPLInferencer'),
            retriever=dict(
                fix_id_list=[
                    0,
                    1,
                    2,
                    3,
                    4,
                    ],
                type='opencompass.openicl.icl_retriever.FixKRetriever')),
        name='world_religions',
        path='opencompass/cmmlu',
        reader_cfg=dict(
            input_columns=[
                'question',
                'A',
                'B',
                'C',
                'D',
                ],
            output_column='answer',
            test_split='test',
            train_split='dev'),
        type='opencompass.datasets.CMMLUDataset'),
    ]
datasets=[
    dict(abbr='Length9000Depth0_2needle_en_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth10_2needle_en_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth21_2needle_en_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth31_2needle_en_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth42_2needle_en_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth52_2needle_en_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth63_2needle_en_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth73_2needle_en_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth84_2needle_en_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth94_2needle_en_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth100_2needle_en_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth0_2needle_en_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth10_2needle_en_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth21_2needle_en_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth31_2needle_en_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth42_2needle_en_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth52_2needle_en_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth63_2needle_en_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth73_2needle_en_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth84_2needle_en_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth94_2needle_en_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth100_2needle_en_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth0_2needle_en_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth10_2needle_en_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth21_2needle_en_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth31_2needle_en_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth42_2needle_en_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth52_2needle_en_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth63_2needle_en_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth73_2needle_en_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth84_2needle_en_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth94_2needle_en_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth100_2needle_en_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth0_2needle_en_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth10_2needle_en_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth21_2needle_en_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth31_2needle_en_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth42_2needle_en_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth52_2needle_en_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth63_2needle_en_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth73_2needle_en_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth84_2needle_en_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth94_2needle_en_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth100_2needle_en_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth0_2needle_en_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth10_2needle_en_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth21_2needle_en_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth31_2needle_en_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth42_2needle_en_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth52_2needle_en_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth63_2needle_en_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth73_2needle_en_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth84_2needle_en_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth94_2needle_en_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth100_2needle_en_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth0_2needle_en_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth10_2needle_en_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth21_2needle_en_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth31_2needle_en_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth42_2needle_en_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth52_2needle_en_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth63_2needle_en_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth73_2needle_en_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth84_2needle_en_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth94_2needle_en_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth100_2needle_en_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth0_2needle_en_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth10_2needle_en_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth21_2needle_en_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth31_2needle_en_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth42_2needle_en_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth52_2needle_en_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth63_2needle_en_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth73_2needle_en_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth84_2needle_en_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth94_2needle_en_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth100_2needle_en_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth0_2needle_en_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth10_2needle_en_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth21_2needle_en_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth31_2needle_en_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth42_2needle_en_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth52_2needle_en_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth63_2needle_en_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth73_2needle_en_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth84_2needle_en_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth94_2needle_en_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth100_2needle_en_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth0_3needle_en_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth10_3needle_en_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth21_3needle_en_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth31_3needle_en_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth42_3needle_en_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth52_3needle_en_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth63_3needle_en_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth73_3needle_en_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth84_3needle_en_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth94_3needle_en_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth100_3needle_en_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth0_3needle_en_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth10_3needle_en_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth21_3needle_en_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth31_3needle_en_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth42_3needle_en_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth52_3needle_en_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth63_3needle_en_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth73_3needle_en_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth84_3needle_en_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth94_3needle_en_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth100_3needle_en_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth0_3needle_en_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth10_3needle_en_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth21_3needle_en_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth31_3needle_en_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth42_3needle_en_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth52_3needle_en_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth63_3needle_en_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth73_3needle_en_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth84_3needle_en_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth94_3needle_en_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth100_3needle_en_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth0_3needle_en_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth10_3needle_en_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth21_3needle_en_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth31_3needle_en_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth42_3needle_en_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth52_3needle_en_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth63_3needle_en_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth73_3needle_en_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth84_3needle_en_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth94_3needle_en_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth100_3needle_en_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth0_3needle_en_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth10_3needle_en_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth21_3needle_en_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth31_3needle_en_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth42_3needle_en_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth52_3needle_en_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth63_3needle_en_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth73_3needle_en_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth84_3needle_en_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth94_3needle_en_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth100_3needle_en_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth0_3needle_en_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth10_3needle_en_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth21_3needle_en_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth31_3needle_en_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth42_3needle_en_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth52_3needle_en_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth63_3needle_en_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth73_3needle_en_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth84_3needle_en_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth94_3needle_en_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth100_3needle_en_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth0_3needle_en_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth10_3needle_en_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth21_3needle_en_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth31_3needle_en_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth42_3needle_en_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth52_3needle_en_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth63_3needle_en_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth73_3needle_en_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth84_3needle_en_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth94_3needle_en_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth100_3needle_en_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth0_3needle_en_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth10_3needle_en_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth21_3needle_en_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth31_3needle_en_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth42_3needle_en_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth52_3needle_en_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth63_3needle_en_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth73_3needle_en_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth84_3needle_en_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth94_3needle_en_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth100_3needle_en_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth0_4needle_en_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth10_4needle_en_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth21_4needle_en_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth31_4needle_en_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth42_4needle_en_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth52_4needle_en_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth63_4needle_en_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth73_4needle_en_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth84_4needle_en_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth94_4needle_en_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth100_4needle_en_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth0_4needle_en_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth10_4needle_en_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth21_4needle_en_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth31_4needle_en_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth42_4needle_en_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth52_4needle_en_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth63_4needle_en_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth73_4needle_en_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth84_4needle_en_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth94_4needle_en_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth100_4needle_en_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth0_4needle_en_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth10_4needle_en_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth21_4needle_en_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth31_4needle_en_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth42_4needle_en_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth52_4needle_en_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth63_4needle_en_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth73_4needle_en_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth84_4needle_en_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth94_4needle_en_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth100_4needle_en_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth0_4needle_en_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth10_4needle_en_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth21_4needle_en_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth31_4needle_en_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth42_4needle_en_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth52_4needle_en_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth63_4needle_en_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth73_4needle_en_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth84_4needle_en_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth94_4needle_en_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth100_4needle_en_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth0_4needle_en_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth10_4needle_en_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth21_4needle_en_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth31_4needle_en_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth42_4needle_en_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth52_4needle_en_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth63_4needle_en_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth73_4needle_en_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth84_4needle_en_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth94_4needle_en_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth100_4needle_en_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth0_4needle_en_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth10_4needle_en_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth21_4needle_en_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth31_4needle_en_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth42_4needle_en_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth52_4needle_en_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth63_4needle_en_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth73_4needle_en_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth84_4needle_en_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth94_4needle_en_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth100_4needle_en_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth0_4needle_en_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth10_4needle_en_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth21_4needle_en_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth31_4needle_en_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth42_4needle_en_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth52_4needle_en_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth63_4needle_en_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth73_4needle_en_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth84_4needle_en_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth94_4needle_en_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth100_4needle_en_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth0_4needle_en_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth10_4needle_en_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth21_4needle_en_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth31_4needle_en_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth42_4needle_en_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth52_4needle_en_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth63_4needle_en_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth73_4needle_en_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth84_4needle_en_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth94_4needle_en_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth100_4needle_en_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth0_5needle_en_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth10_5needle_en_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth21_5needle_en_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth31_5needle_en_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth42_5needle_en_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth52_5needle_en_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth63_5needle_en_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth73_5needle_en_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth84_5needle_en_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth94_5needle_en_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth100_5needle_en_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth0_5needle_en_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth10_5needle_en_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth21_5needle_en_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth31_5needle_en_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth42_5needle_en_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth52_5needle_en_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth63_5needle_en_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth73_5needle_en_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth84_5needle_en_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth94_5needle_en_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth100_5needle_en_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth0_5needle_en_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth10_5needle_en_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth21_5needle_en_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth31_5needle_en_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth42_5needle_en_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth52_5needle_en_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth63_5needle_en_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth73_5needle_en_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth84_5needle_en_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth94_5needle_en_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth100_5needle_en_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth0_5needle_en_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth10_5needle_en_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth21_5needle_en_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth31_5needle_en_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth42_5needle_en_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth52_5needle_en_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth63_5needle_en_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth73_5needle_en_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth84_5needle_en_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth94_5needle_en_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth100_5needle_en_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth0_5needle_en_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth10_5needle_en_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth21_5needle_en_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth31_5needle_en_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth42_5needle_en_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth52_5needle_en_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth63_5needle_en_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth73_5needle_en_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth84_5needle_en_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth94_5needle_en_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth100_5needle_en_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth0_5needle_en_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth10_5needle_en_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth21_5needle_en_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth31_5needle_en_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth42_5needle_en_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth52_5needle_en_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth63_5needle_en_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth73_5needle_en_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth84_5needle_en_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth94_5needle_en_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth100_5needle_en_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth0_5needle_en_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth10_5needle_en_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth21_5needle_en_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth31_5needle_en_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth42_5needle_en_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth52_5needle_en_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth63_5needle_en_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth73_5needle_en_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth84_5needle_en_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth94_5needle_en_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth100_5needle_en_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth0_5needle_en_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth10_5needle_en_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth21_5needle_en_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth31_5needle_en_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth42_5needle_en_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth52_5needle_en_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth63_5needle_en_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth73_5needle_en_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth84_5needle_en_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth94_5needle_en_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth100_5needle_en_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth0_2needle_zh_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth10_2needle_zh_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth21_2needle_zh_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth31_2needle_zh_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth42_2needle_zh_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth52_2needle_zh_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth63_2needle_zh_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth73_2needle_zh_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth84_2needle_zh_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth94_2needle_zh_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth100_2needle_zh_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth0_2needle_zh_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth10_2needle_zh_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth21_2needle_zh_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth31_2needle_zh_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth42_2needle_zh_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth52_2needle_zh_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth63_2needle_zh_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth73_2needle_zh_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth84_2needle_zh_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth94_2needle_zh_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth100_2needle_zh_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth0_2needle_zh_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth10_2needle_zh_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth21_2needle_zh_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth31_2needle_zh_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth42_2needle_zh_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth52_2needle_zh_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth63_2needle_zh_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth73_2needle_zh_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth84_2needle_zh_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth94_2needle_zh_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth100_2needle_zh_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth0_2needle_zh_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth10_2needle_zh_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth21_2needle_zh_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth31_2needle_zh_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth42_2needle_zh_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth52_2needle_zh_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth63_2needle_zh_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth73_2needle_zh_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth84_2needle_zh_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth94_2needle_zh_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth100_2needle_zh_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth0_2needle_zh_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth10_2needle_zh_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth21_2needle_zh_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth31_2needle_zh_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth42_2needle_zh_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth52_2needle_zh_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth63_2needle_zh_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth73_2needle_zh_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth84_2needle_zh_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth94_2needle_zh_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth100_2needle_zh_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth0_2needle_zh_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth10_2needle_zh_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth21_2needle_zh_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth31_2needle_zh_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth42_2needle_zh_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth52_2needle_zh_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth63_2needle_zh_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth73_2needle_zh_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth84_2needle_zh_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth94_2needle_zh_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth100_2needle_zh_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth0_2needle_zh_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth10_2needle_zh_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth21_2needle_zh_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth31_2needle_zh_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth42_2needle_zh_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth52_2needle_zh_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth63_2needle_zh_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth73_2needle_zh_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth84_2needle_zh_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth94_2needle_zh_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth100_2needle_zh_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth0_2needle_zh_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth10_2needle_zh_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth21_2needle_zh_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth31_2needle_zh_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth42_2needle_zh_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth52_2needle_zh_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth63_2needle_zh_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth73_2needle_zh_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth84_2needle_zh_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth94_2needle_zh_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth100_2needle_zh_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth0_3needle_zh_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth10_3needle_zh_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth21_3needle_zh_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth31_3needle_zh_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth42_3needle_zh_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth52_3needle_zh_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth63_3needle_zh_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth73_3needle_zh_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth84_3needle_zh_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth94_3needle_zh_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth100_3needle_zh_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth0_3needle_zh_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth10_3needle_zh_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth21_3needle_zh_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth31_3needle_zh_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth42_3needle_zh_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth52_3needle_zh_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth63_3needle_zh_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth73_3needle_zh_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth84_3needle_zh_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth94_3needle_zh_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth100_3needle_zh_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth0_3needle_zh_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth10_3needle_zh_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth21_3needle_zh_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth31_3needle_zh_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth42_3needle_zh_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth52_3needle_zh_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth63_3needle_zh_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth73_3needle_zh_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth84_3needle_zh_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth94_3needle_zh_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth100_3needle_zh_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth0_3needle_zh_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth10_3needle_zh_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth21_3needle_zh_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth31_3needle_zh_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth42_3needle_zh_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth52_3needle_zh_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth63_3needle_zh_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth73_3needle_zh_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth84_3needle_zh_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth94_3needle_zh_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth100_3needle_zh_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth0_3needle_zh_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth10_3needle_zh_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth21_3needle_zh_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth31_3needle_zh_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth42_3needle_zh_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth52_3needle_zh_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth63_3needle_zh_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth73_3needle_zh_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth84_3needle_zh_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth94_3needle_zh_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth100_3needle_zh_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth0_3needle_zh_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth10_3needle_zh_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth21_3needle_zh_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth31_3needle_zh_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth42_3needle_zh_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth52_3needle_zh_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth63_3needle_zh_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth73_3needle_zh_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth84_3needle_zh_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth94_3needle_zh_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth100_3needle_zh_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth0_3needle_zh_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth10_3needle_zh_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth21_3needle_zh_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth31_3needle_zh_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth42_3needle_zh_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth52_3needle_zh_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth63_3needle_zh_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth73_3needle_zh_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth84_3needle_zh_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth94_3needle_zh_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth100_3needle_zh_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth0_3needle_zh_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth10_3needle_zh_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth21_3needle_zh_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth31_3needle_zh_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth42_3needle_zh_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth52_3needle_zh_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth63_3needle_zh_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth73_3needle_zh_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth84_3needle_zh_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth94_3needle_zh_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth100_3needle_zh_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth0_4needle_zh_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth10_4needle_zh_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth21_4needle_zh_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth31_4needle_zh_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth42_4needle_zh_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth52_4needle_zh_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth63_4needle_zh_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth73_4needle_zh_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth84_4needle_zh_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth94_4needle_zh_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth100_4needle_zh_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth0_4needle_zh_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth10_4needle_zh_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth21_4needle_zh_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth31_4needle_zh_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth42_4needle_zh_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth52_4needle_zh_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth63_4needle_zh_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth73_4needle_zh_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth84_4needle_zh_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth94_4needle_zh_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth100_4needle_zh_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth0_4needle_zh_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth10_4needle_zh_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth21_4needle_zh_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth31_4needle_zh_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth42_4needle_zh_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth52_4needle_zh_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth63_4needle_zh_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth73_4needle_zh_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth84_4needle_zh_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth94_4needle_zh_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth100_4needle_zh_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth0_4needle_zh_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth10_4needle_zh_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth21_4needle_zh_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth31_4needle_zh_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth42_4needle_zh_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth52_4needle_zh_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth63_4needle_zh_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth73_4needle_zh_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth84_4needle_zh_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth94_4needle_zh_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth100_4needle_zh_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth0_4needle_zh_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth10_4needle_zh_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth21_4needle_zh_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth31_4needle_zh_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth42_4needle_zh_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth52_4needle_zh_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth63_4needle_zh_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth73_4needle_zh_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth84_4needle_zh_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth94_4needle_zh_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth100_4needle_zh_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth0_4needle_zh_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth10_4needle_zh_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth21_4needle_zh_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth31_4needle_zh_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth42_4needle_zh_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth52_4needle_zh_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth63_4needle_zh_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth73_4needle_zh_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth84_4needle_zh_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth94_4needle_zh_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth100_4needle_zh_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth0_4needle_zh_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth10_4needle_zh_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth21_4needle_zh_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth31_4needle_zh_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth42_4needle_zh_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth52_4needle_zh_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth63_4needle_zh_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth73_4needle_zh_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth84_4needle_zh_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth94_4needle_zh_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth100_4needle_zh_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth0_4needle_zh_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth10_4needle_zh_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth21_4needle_zh_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth31_4needle_zh_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth42_4needle_zh_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth52_4needle_zh_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth63_4needle_zh_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth73_4needle_zh_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth84_4needle_zh_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth94_4needle_zh_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth100_4needle_zh_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth0_5needle_zh_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth10_5needle_zh_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth21_5needle_zh_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth31_5needle_zh_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth42_5needle_zh_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth52_5needle_zh_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth63_5needle_zh_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth73_5needle_zh_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth84_5needle_zh_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth94_5needle_zh_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth100_5needle_zh_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth0_5needle_zh_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth10_5needle_zh_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth21_5needle_zh_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth31_5needle_zh_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth42_5needle_zh_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth52_5needle_zh_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth63_5needle_zh_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth73_5needle_zh_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth84_5needle_zh_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth94_5needle_zh_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth100_5needle_zh_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth0_5needle_zh_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth10_5needle_zh_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth21_5needle_zh_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth31_5needle_zh_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth42_5needle_zh_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth52_5needle_zh_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth63_5needle_zh_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth73_5needle_zh_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth84_5needle_zh_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth94_5needle_zh_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth100_5needle_zh_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth0_5needle_zh_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth10_5needle_zh_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth21_5needle_zh_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth31_5needle_zh_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth42_5needle_zh_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth52_5needle_zh_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth63_5needle_zh_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth73_5needle_zh_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth84_5needle_zh_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth94_5needle_zh_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth100_5needle_zh_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth0_5needle_zh_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth10_5needle_zh_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth21_5needle_zh_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth31_5needle_zh_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth42_5needle_zh_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth52_5needle_zh_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth63_5needle_zh_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth73_5needle_zh_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth84_5needle_zh_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth94_5needle_zh_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth100_5needle_zh_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth0_5needle_zh_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth10_5needle_zh_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth21_5needle_zh_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth31_5needle_zh_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth42_5needle_zh_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth52_5needle_zh_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth63_5needle_zh_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth73_5needle_zh_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth84_5needle_zh_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth94_5needle_zh_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth100_5needle_zh_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth0_5needle_zh_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth10_5needle_zh_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth21_5needle_zh_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth31_5needle_zh_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth42_5needle_zh_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth52_5needle_zh_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth63_5needle_zh_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth73_5needle_zh_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth84_5needle_zh_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth94_5needle_zh_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth100_5needle_zh_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth0_5needle_zh_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth10_5needle_zh_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth21_5needle_zh_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth31_5needle_zh_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth42_5needle_zh_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth52_5needle_zh_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth63_5needle_zh_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth73_5needle_zh_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth84_5needle_zh_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth94_5needle_zh_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth100_5needle_zh_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth0_origin_en_32k',
        depth=0,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length9000Depth10_origin_en_32k',
        depth=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length9000Depth21_origin_en_32k',
        depth=21,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length9000Depth31_origin_en_32k',
        depth=31,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length9000Depth42_origin_en_32k',
        depth=42,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length9000Depth52_origin_en_32k',
        depth=52,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length9000Depth63_origin_en_32k',
        depth=63,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length9000Depth73_origin_en_32k',
        depth=73,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length9000Depth84_origin_en_32k',
        depth=84,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length9000Depth94_origin_en_32k',
        depth=94,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length9000Depth100_origin_en_32k',
        depth=100,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length13000Depth0_origin_en_32k',
        depth=0,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length13000Depth10_origin_en_32k',
        depth=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length13000Depth21_origin_en_32k',
        depth=21,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length13000Depth31_origin_en_32k',
        depth=31,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length13000Depth42_origin_en_32k',
        depth=42,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length13000Depth52_origin_en_32k',
        depth=52,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length13000Depth63_origin_en_32k',
        depth=63,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length13000Depth73_origin_en_32k',
        depth=73,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length13000Depth84_origin_en_32k',
        depth=84,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length13000Depth94_origin_en_32k',
        depth=94,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length13000Depth100_origin_en_32k',
        depth=100,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length17000Depth0_origin_en_32k',
        depth=0,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length17000Depth10_origin_en_32k',
        depth=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length17000Depth21_origin_en_32k',
        depth=21,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length17000Depth31_origin_en_32k',
        depth=31,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length17000Depth42_origin_en_32k',
        depth=42,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length17000Depth52_origin_en_32k',
        depth=52,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length17000Depth63_origin_en_32k',
        depth=63,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length17000Depth73_origin_en_32k',
        depth=73,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length17000Depth84_origin_en_32k',
        depth=84,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length17000Depth94_origin_en_32k',
        depth=94,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length17000Depth100_origin_en_32k',
        depth=100,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length21000Depth0_origin_en_32k',
        depth=0,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length21000Depth10_origin_en_32k',
        depth=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length21000Depth21_origin_en_32k',
        depth=21,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length21000Depth31_origin_en_32k',
        depth=31,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length21000Depth42_origin_en_32k',
        depth=42,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length21000Depth52_origin_en_32k',
        depth=52,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length21000Depth63_origin_en_32k',
        depth=63,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length21000Depth73_origin_en_32k',
        depth=73,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length21000Depth84_origin_en_32k',
        depth=84,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length21000Depth94_origin_en_32k',
        depth=94,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length21000Depth100_origin_en_32k',
        depth=100,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length25000Depth0_origin_en_32k',
        depth=0,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length25000Depth10_origin_en_32k',
        depth=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length25000Depth21_origin_en_32k',
        depth=21,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length25000Depth31_origin_en_32k',
        depth=31,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length25000Depth42_origin_en_32k',
        depth=42,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length25000Depth52_origin_en_32k',
        depth=52,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length25000Depth63_origin_en_32k',
        depth=63,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length25000Depth73_origin_en_32k',
        depth=73,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length25000Depth84_origin_en_32k',
        depth=84,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length25000Depth94_origin_en_32k',
        depth=94,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length25000Depth100_origin_en_32k',
        depth=100,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length29000Depth0_origin_en_32k',
        depth=0,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length29000Depth10_origin_en_32k',
        depth=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length29000Depth21_origin_en_32k',
        depth=21,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length29000Depth31_origin_en_32k',
        depth=31,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length29000Depth42_origin_en_32k',
        depth=42,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length29000Depth52_origin_en_32k',
        depth=52,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length29000Depth63_origin_en_32k',
        depth=63,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length29000Depth73_origin_en_32k',
        depth=73,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length29000Depth84_origin_en_32k',
        depth=84,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length29000Depth94_origin_en_32k',
        depth=94,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length29000Depth100_origin_en_32k',
        depth=100,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length31000Depth0_origin_en_32k',
        depth=0,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length31000Depth10_origin_en_32k',
        depth=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length31000Depth21_origin_en_32k',
        depth=21,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length31000Depth31_origin_en_32k',
        depth=31,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length31000Depth42_origin_en_32k',
        depth=42,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length31000Depth52_origin_en_32k',
        depth=52,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length31000Depth63_origin_en_32k',
        depth=63,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length31000Depth73_origin_en_32k',
        depth=73,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length31000Depth84_origin_en_32k',
        depth=84,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length31000Depth94_origin_en_32k',
        depth=94,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length31000Depth100_origin_en_32k',
        depth=100,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length32000Depth0_origin_en_32k',
        depth=0,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length32000Depth10_origin_en_32k',
        depth=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length32000Depth21_origin_en_32k',
        depth=21,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length32000Depth31_origin_en_32k',
        depth=31,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length32000Depth42_origin_en_32k',
        depth=42,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length32000Depth52_origin_en_32k',
        depth=52,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length32000Depth63_origin_en_32k',
        depth=63,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length32000Depth73_origin_en_32k',
        depth=73,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length32000Depth84_origin_en_32k',
        depth=84,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length32000Depth94_origin_en_32k',
        depth=94,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length32000Depth100_origin_en_32k',
        depth=100,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length9000Depth0_origin_zh_32k',
        depth=0,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length9000Depth10_origin_zh_32k',
        depth=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length9000Depth21_origin_zh_32k',
        depth=21,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length9000Depth31_origin_zh_32k',
        depth=31,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length9000Depth42_origin_zh_32k',
        depth=42,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length9000Depth52_origin_zh_32k',
        depth=52,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length9000Depth63_origin_zh_32k',
        depth=63,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length9000Depth73_origin_zh_32k',
        depth=73,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length9000Depth84_origin_zh_32k',
        depth=84,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length9000Depth94_origin_zh_32k',
        depth=94,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length9000Depth100_origin_zh_32k',
        depth=100,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length13000Depth0_origin_zh_32k',
        depth=0,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length13000Depth10_origin_zh_32k',
        depth=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length13000Depth21_origin_zh_32k',
        depth=21,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length13000Depth31_origin_zh_32k',
        depth=31,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length13000Depth42_origin_zh_32k',
        depth=42,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length13000Depth52_origin_zh_32k',
        depth=52,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length13000Depth63_origin_zh_32k',
        depth=63,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length13000Depth73_origin_zh_32k',
        depth=73,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length13000Depth84_origin_zh_32k',
        depth=84,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length13000Depth94_origin_zh_32k',
        depth=94,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length13000Depth100_origin_zh_32k',
        depth=100,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length17000Depth0_origin_zh_32k',
        depth=0,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length17000Depth10_origin_zh_32k',
        depth=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length17000Depth21_origin_zh_32k',
        depth=21,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length17000Depth31_origin_zh_32k',
        depth=31,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length17000Depth42_origin_zh_32k',
        depth=42,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length17000Depth52_origin_zh_32k',
        depth=52,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length17000Depth63_origin_zh_32k',
        depth=63,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length17000Depth73_origin_zh_32k',
        depth=73,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length17000Depth84_origin_zh_32k',
        depth=84,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length17000Depth94_origin_zh_32k',
        depth=94,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length17000Depth100_origin_zh_32k',
        depth=100,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length21000Depth0_origin_zh_32k',
        depth=0,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length21000Depth10_origin_zh_32k',
        depth=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length21000Depth21_origin_zh_32k',
        depth=21,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length21000Depth31_origin_zh_32k',
        depth=31,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length21000Depth42_origin_zh_32k',
        depth=42,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length21000Depth52_origin_zh_32k',
        depth=52,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length21000Depth63_origin_zh_32k',
        depth=63,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length21000Depth73_origin_zh_32k',
        depth=73,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length21000Depth84_origin_zh_32k',
        depth=84,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length21000Depth94_origin_zh_32k',
        depth=94,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length21000Depth100_origin_zh_32k',
        depth=100,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length25000Depth0_origin_zh_32k',
        depth=0,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length25000Depth10_origin_zh_32k',
        depth=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length25000Depth21_origin_zh_32k',
        depth=21,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length25000Depth31_origin_zh_32k',
        depth=31,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length25000Depth42_origin_zh_32k',
        depth=42,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length25000Depth52_origin_zh_32k',
        depth=52,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length25000Depth63_origin_zh_32k',
        depth=63,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length25000Depth73_origin_zh_32k',
        depth=73,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length25000Depth84_origin_zh_32k',
        depth=84,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length25000Depth94_origin_zh_32k',
        depth=94,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length25000Depth100_origin_zh_32k',
        depth=100,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length29000Depth0_origin_zh_32k',
        depth=0,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length29000Depth10_origin_zh_32k',
        depth=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length29000Depth21_origin_zh_32k',
        depth=21,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length29000Depth31_origin_zh_32k',
        depth=31,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length29000Depth42_origin_zh_32k',
        depth=42,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length29000Depth52_origin_zh_32k',
        depth=52,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length29000Depth63_origin_zh_32k',
        depth=63,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length29000Depth73_origin_zh_32k',
        depth=73,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length29000Depth84_origin_zh_32k',
        depth=84,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length29000Depth94_origin_zh_32k',
        depth=94,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length29000Depth100_origin_zh_32k',
        depth=100,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length31000Depth0_origin_zh_32k',
        depth=0,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length31000Depth10_origin_zh_32k',
        depth=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length31000Depth21_origin_zh_32k',
        depth=21,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length31000Depth31_origin_zh_32k',
        depth=31,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length31000Depth42_origin_zh_32k',
        depth=42,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length31000Depth52_origin_zh_32k',
        depth=52,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length31000Depth63_origin_zh_32k',
        depth=63,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length31000Depth73_origin_zh_32k',
        depth=73,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length31000Depth84_origin_zh_32k',
        depth=84,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length31000Depth94_origin_zh_32k',
        depth=94,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length31000Depth100_origin_zh_32k',
        depth=100,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length32000Depth0_origin_zh_32k',
        depth=0,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length32000Depth10_origin_zh_32k',
        depth=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length32000Depth21_origin_zh_32k',
        depth=21,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length32000Depth31_origin_zh_32k',
        depth=31,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length32000Depth42_origin_zh_32k',
        depth=42,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length32000Depth52_origin_zh_32k',
        depth=52,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length32000Depth63_origin_zh_32k',
        depth=63,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length32000Depth73_origin_zh_32k',
        depth=73,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length32000Depth84_origin_zh_32k',
        depth=84,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length32000Depth94_origin_zh_32k',
        depth=94,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length32000Depth100_origin_zh_32k',
        depth=100,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length9000_parallel_en_32k',
        depths=[
            0,
            10,
            21,
            31,
            42,
            52,
            63,
            73,
            84,
            94,
            100,
            ],
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.parallel.NeedleBenchParallelEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=25,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.parallel.NeedleBenchParallelDataset'),
    dict(abbr='Length13000_parallel_en_32k',
        depths=[
            0,
            10,
            21,
            31,
            42,
            52,
            63,
            73,
            84,
            94,
            100,
            ],
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.parallel.NeedleBenchParallelEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=25,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.parallel.NeedleBenchParallelDataset'),
    dict(abbr='Length17000_parallel_en_32k',
        depths=[
            0,
            10,
            21,
            31,
            42,
            52,
            63,
            73,
            84,
            94,
            100,
            ],
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.parallel.NeedleBenchParallelEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=25,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.parallel.NeedleBenchParallelDataset'),
    dict(abbr='Length21000_parallel_en_32k',
        depths=[
            0,
            10,
            21,
            31,
            42,
            52,
            63,
            73,
            84,
            94,
            100,
            ],
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.parallel.NeedleBenchParallelEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=25,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.parallel.NeedleBenchParallelDataset'),
    dict(abbr='Length25000_parallel_en_32k',
        depths=[
            0,
            10,
            21,
            31,
            42,
            52,
            63,
            73,
            84,
            94,
            100,
            ],
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.parallel.NeedleBenchParallelEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=25,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.parallel.NeedleBenchParallelDataset'),
    dict(abbr='Length29000_parallel_en_32k',
        depths=[
            0,
            10,
            21,
            31,
            42,
            52,
            63,
            73,
            84,
            94,
            100,
            ],
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.parallel.NeedleBenchParallelEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=25,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.parallel.NeedleBenchParallelDataset'),
    dict(abbr='Length31000_parallel_en_32k',
        depths=[
            0,
            10,
            21,
            31,
            42,
            52,
            63,
            73,
            84,
            94,
            100,
            ],
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.parallel.NeedleBenchParallelEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=25,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.parallel.NeedleBenchParallelDataset'),
    dict(abbr='Length32000_parallel_en_32k',
        depths=[
            0,
            10,
            21,
            31,
            42,
            52,
            63,
            73,
            84,
            94,
            100,
            ],
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.parallel.NeedleBenchParallelEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=25,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.parallel.NeedleBenchParallelDataset'),
    dict(abbr='Length9000_parallel_zh_32k',
        depths=[
            0,
            10,
            21,
            31,
            42,
            52,
            63,
            73,
            84,
            94,
            100,
            ],
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.parallel.NeedleBenchParallelEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=25,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.parallel.NeedleBenchParallelDataset'),
    dict(abbr='Length13000_parallel_zh_32k',
        depths=[
            0,
            10,
            21,
            31,
            42,
            52,
            63,
            73,
            84,
            94,
            100,
            ],
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.parallel.NeedleBenchParallelEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=25,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.parallel.NeedleBenchParallelDataset'),
    dict(abbr='Length17000_parallel_zh_32k',
        depths=[
            0,
            10,
            21,
            31,
            42,
            52,
            63,
            73,
            84,
            94,
            100,
            ],
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.parallel.NeedleBenchParallelEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=25,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.parallel.NeedleBenchParallelDataset'),
    dict(abbr='Length21000_parallel_zh_32k',
        depths=[
            0,
            10,
            21,
            31,
            42,
            52,
            63,
            73,
            84,
            94,
            100,
            ],
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.parallel.NeedleBenchParallelEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=25,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.parallel.NeedleBenchParallelDataset'),
    dict(abbr='Length25000_parallel_zh_32k',
        depths=[
            0,
            10,
            21,
            31,
            42,
            52,
            63,
            73,
            84,
            94,
            100,
            ],
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.parallel.NeedleBenchParallelEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=25,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.parallel.NeedleBenchParallelDataset'),
    dict(abbr='Length29000_parallel_zh_32k',
        depths=[
            0,
            10,
            21,
            31,
            42,
            52,
            63,
            73,
            84,
            94,
            100,
            ],
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.parallel.NeedleBenchParallelEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=25,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.parallel.NeedleBenchParallelDataset'),
    dict(abbr='Length31000_parallel_zh_32k',
        depths=[
            0,
            10,
            21,
            31,
            42,
            52,
            63,
            73,
            84,
            94,
            100,
            ],
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.parallel.NeedleBenchParallelEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=25,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.parallel.NeedleBenchParallelDataset'),
    dict(abbr='Length32000_parallel_zh_32k',
        depths=[
            0,
            10,
            21,
            31,
            42,
            52,
            63,
            73,
            84,
            94,
            100,
            ],
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.parallel.NeedleBenchParallelEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=25,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.parallel.NeedleBenchParallelDataset'),
    ]
models=[
    dict(abbr='myQwen1.5',
        batch_padding=False,
        batch_size=8,
        max_out_len=100,
        max_seq_len=2048,
        model_kwargs=dict(
            device_map='auto'),
        path='/home/kuro/Desktop/myOpenCompass/models/qwen1.5_0.5b/Qwen1.5-0.5B',
        run_cfg=dict(
            num_gpus=1,
            num_procs=1),
        tokenizer_kwargs=dict(
            padding_side='left',
            truncation_side='left',
            use_fast=False),
        tokenizer_path='/home/kuro/Desktop/myOpenCompass/models/qwen1.5_0.5b/Qwen1.5-0.5B',
        type='opencompass.models.HuggingFaceCausalLM'),
    ]
needlebench_datasets=[
    dict(abbr='Length9000Depth0_2needle_en_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth10_2needle_en_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth21_2needle_en_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth31_2needle_en_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth42_2needle_en_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth52_2needle_en_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth63_2needle_en_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth73_2needle_en_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth84_2needle_en_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth94_2needle_en_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth100_2needle_en_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth0_2needle_en_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth10_2needle_en_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth21_2needle_en_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth31_2needle_en_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth42_2needle_en_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth52_2needle_en_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth63_2needle_en_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth73_2needle_en_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth84_2needle_en_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth94_2needle_en_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth100_2needle_en_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth0_2needle_en_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth10_2needle_en_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth21_2needle_en_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth31_2needle_en_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth42_2needle_en_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth52_2needle_en_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth63_2needle_en_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth73_2needle_en_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth84_2needle_en_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth94_2needle_en_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth100_2needle_en_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth0_2needle_en_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth10_2needle_en_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth21_2needle_en_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth31_2needle_en_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth42_2needle_en_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth52_2needle_en_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth63_2needle_en_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth73_2needle_en_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth84_2needle_en_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth94_2needle_en_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth100_2needle_en_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth0_2needle_en_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth10_2needle_en_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth21_2needle_en_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth31_2needle_en_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth42_2needle_en_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth52_2needle_en_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth63_2needle_en_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth73_2needle_en_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth84_2needle_en_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth94_2needle_en_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth100_2needle_en_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth0_2needle_en_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth10_2needle_en_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth21_2needle_en_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth31_2needle_en_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth42_2needle_en_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth52_2needle_en_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth63_2needle_en_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth73_2needle_en_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth84_2needle_en_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth94_2needle_en_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth100_2needle_en_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth0_2needle_en_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth10_2needle_en_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth21_2needle_en_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth31_2needle_en_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth42_2needle_en_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth52_2needle_en_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth63_2needle_en_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth73_2needle_en_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth84_2needle_en_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth94_2needle_en_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth100_2needle_en_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth0_2needle_en_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth10_2needle_en_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth21_2needle_en_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth31_2needle_en_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth42_2needle_en_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth52_2needle_en_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth63_2needle_en_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth73_2needle_en_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth84_2needle_en_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth94_2needle_en_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth100_2needle_en_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth0_3needle_en_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth10_3needle_en_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth21_3needle_en_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth31_3needle_en_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth42_3needle_en_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth52_3needle_en_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth63_3needle_en_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth73_3needle_en_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth84_3needle_en_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth94_3needle_en_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth100_3needle_en_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth0_3needle_en_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth10_3needle_en_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth21_3needle_en_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth31_3needle_en_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth42_3needle_en_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth52_3needle_en_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth63_3needle_en_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth73_3needle_en_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth84_3needle_en_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth94_3needle_en_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth100_3needle_en_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth0_3needle_en_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth10_3needle_en_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth21_3needle_en_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth31_3needle_en_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth42_3needle_en_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth52_3needle_en_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth63_3needle_en_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth73_3needle_en_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth84_3needle_en_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth94_3needle_en_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth100_3needle_en_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth0_3needle_en_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth10_3needle_en_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth21_3needle_en_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth31_3needle_en_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth42_3needle_en_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth52_3needle_en_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth63_3needle_en_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth73_3needle_en_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth84_3needle_en_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth94_3needle_en_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth100_3needle_en_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth0_3needle_en_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth10_3needle_en_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth21_3needle_en_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth31_3needle_en_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth42_3needle_en_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth52_3needle_en_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth63_3needle_en_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth73_3needle_en_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth84_3needle_en_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth94_3needle_en_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth100_3needle_en_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth0_3needle_en_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth10_3needle_en_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth21_3needle_en_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth31_3needle_en_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth42_3needle_en_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth52_3needle_en_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth63_3needle_en_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth73_3needle_en_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth84_3needle_en_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth94_3needle_en_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth100_3needle_en_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth0_3needle_en_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth10_3needle_en_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth21_3needle_en_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth31_3needle_en_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth42_3needle_en_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth52_3needle_en_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth63_3needle_en_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth73_3needle_en_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth84_3needle_en_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth94_3needle_en_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth100_3needle_en_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth0_3needle_en_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth10_3needle_en_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth21_3needle_en_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth31_3needle_en_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth42_3needle_en_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth52_3needle_en_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth63_3needle_en_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth73_3needle_en_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth84_3needle_en_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth94_3needle_en_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth100_3needle_en_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth0_4needle_en_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth10_4needle_en_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth21_4needle_en_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth31_4needle_en_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth42_4needle_en_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth52_4needle_en_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth63_4needle_en_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth73_4needle_en_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth84_4needle_en_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth94_4needle_en_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth100_4needle_en_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth0_4needle_en_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth10_4needle_en_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth21_4needle_en_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth31_4needle_en_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth42_4needle_en_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth52_4needle_en_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth63_4needle_en_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth73_4needle_en_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth84_4needle_en_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth94_4needle_en_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth100_4needle_en_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth0_4needle_en_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth10_4needle_en_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth21_4needle_en_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth31_4needle_en_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth42_4needle_en_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth52_4needle_en_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth63_4needle_en_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth73_4needle_en_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth84_4needle_en_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth94_4needle_en_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth100_4needle_en_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth0_4needle_en_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth10_4needle_en_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth21_4needle_en_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth31_4needle_en_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth42_4needle_en_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth52_4needle_en_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth63_4needle_en_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth73_4needle_en_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth84_4needle_en_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth94_4needle_en_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth100_4needle_en_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth0_4needle_en_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth10_4needle_en_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth21_4needle_en_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth31_4needle_en_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth42_4needle_en_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth52_4needle_en_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth63_4needle_en_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth73_4needle_en_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth84_4needle_en_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth94_4needle_en_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth100_4needle_en_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth0_4needle_en_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth10_4needle_en_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth21_4needle_en_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth31_4needle_en_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth42_4needle_en_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth52_4needle_en_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth63_4needle_en_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth73_4needle_en_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth84_4needle_en_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth94_4needle_en_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth100_4needle_en_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth0_4needle_en_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth10_4needle_en_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth21_4needle_en_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth31_4needle_en_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth42_4needle_en_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth52_4needle_en_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth63_4needle_en_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth73_4needle_en_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth84_4needle_en_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth94_4needle_en_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth100_4needle_en_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth0_4needle_en_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth10_4needle_en_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth21_4needle_en_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth31_4needle_en_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth42_4needle_en_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth52_4needle_en_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth63_4needle_en_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth73_4needle_en_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth84_4needle_en_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth94_4needle_en_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth100_4needle_en_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth0_5needle_en_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth10_5needle_en_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth21_5needle_en_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth31_5needle_en_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth42_5needle_en_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth52_5needle_en_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth63_5needle_en_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth73_5needle_en_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth84_5needle_en_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth94_5needle_en_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth100_5needle_en_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth0_5needle_en_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth10_5needle_en_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth21_5needle_en_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth31_5needle_en_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth42_5needle_en_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth52_5needle_en_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth63_5needle_en_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth73_5needle_en_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth84_5needle_en_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth94_5needle_en_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth100_5needle_en_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth0_5needle_en_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth10_5needle_en_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth21_5needle_en_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth31_5needle_en_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth42_5needle_en_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth52_5needle_en_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth63_5needle_en_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth73_5needle_en_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth84_5needle_en_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth94_5needle_en_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth100_5needle_en_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth0_5needle_en_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth10_5needle_en_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth21_5needle_en_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth31_5needle_en_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth42_5needle_en_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth52_5needle_en_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth63_5needle_en_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth73_5needle_en_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth84_5needle_en_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth94_5needle_en_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth100_5needle_en_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth0_5needle_en_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth10_5needle_en_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth21_5needle_en_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth31_5needle_en_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth42_5needle_en_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth52_5needle_en_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth63_5needle_en_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth73_5needle_en_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth84_5needle_en_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth94_5needle_en_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth100_5needle_en_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth0_5needle_en_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth10_5needle_en_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth21_5needle_en_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth31_5needle_en_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth42_5needle_en_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth52_5needle_en_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth63_5needle_en_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth73_5needle_en_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth84_5needle_en_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth94_5needle_en_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth100_5needle_en_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth0_5needle_en_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth10_5needle_en_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth21_5needle_en_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth31_5needle_en_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth42_5needle_en_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth52_5needle_en_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth63_5needle_en_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth73_5needle_en_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth84_5needle_en_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth94_5needle_en_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth100_5needle_en_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth0_5needle_en_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth10_5needle_en_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth21_5needle_en_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth31_5needle_en_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth42_5needle_en_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth52_5needle_en_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth63_5needle_en_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth73_5needle_en_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth84_5needle_en_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth94_5needle_en_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth100_5needle_en_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='multi_needle_reasoning_en.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth0_2needle_zh_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth10_2needle_zh_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth21_2needle_zh_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth31_2needle_zh_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth42_2needle_zh_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth52_2needle_zh_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth63_2needle_zh_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth73_2needle_zh_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth84_2needle_zh_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth94_2needle_zh_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth100_2needle_zh_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth0_2needle_zh_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth10_2needle_zh_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth21_2needle_zh_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth31_2needle_zh_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth42_2needle_zh_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth52_2needle_zh_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth63_2needle_zh_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth73_2needle_zh_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth84_2needle_zh_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth94_2needle_zh_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth100_2needle_zh_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth0_2needle_zh_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth10_2needle_zh_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth21_2needle_zh_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth31_2needle_zh_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth42_2needle_zh_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth52_2needle_zh_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth63_2needle_zh_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth73_2needle_zh_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth84_2needle_zh_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth94_2needle_zh_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth100_2needle_zh_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth0_2needle_zh_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth10_2needle_zh_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth21_2needle_zh_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth31_2needle_zh_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth42_2needle_zh_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth52_2needle_zh_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth63_2needle_zh_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth73_2needle_zh_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth84_2needle_zh_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth94_2needle_zh_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth100_2needle_zh_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth0_2needle_zh_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth10_2needle_zh_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth21_2needle_zh_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth31_2needle_zh_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth42_2needle_zh_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth52_2needle_zh_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth63_2needle_zh_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth73_2needle_zh_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth84_2needle_zh_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth94_2needle_zh_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth100_2needle_zh_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth0_2needle_zh_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth10_2needle_zh_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth21_2needle_zh_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth31_2needle_zh_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth42_2needle_zh_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth52_2needle_zh_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth63_2needle_zh_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth73_2needle_zh_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth84_2needle_zh_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth94_2needle_zh_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth100_2needle_zh_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth0_2needle_zh_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth10_2needle_zh_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth21_2needle_zh_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth31_2needle_zh_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth42_2needle_zh_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth52_2needle_zh_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth63_2needle_zh_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth73_2needle_zh_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth84_2needle_zh_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth94_2needle_zh_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth100_2needle_zh_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth0_2needle_zh_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth10_2needle_zh_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth21_2needle_zh_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth31_2needle_zh_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth42_2needle_zh_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth52_2needle_zh_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth63_2needle_zh_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth73_2needle_zh_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth84_2needle_zh_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth94_2needle_zh_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth100_2needle_zh_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=2,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth0_3needle_zh_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth10_3needle_zh_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth21_3needle_zh_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth31_3needle_zh_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth42_3needle_zh_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth52_3needle_zh_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth63_3needle_zh_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth73_3needle_zh_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth84_3needle_zh_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth94_3needle_zh_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth100_3needle_zh_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth0_3needle_zh_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth10_3needle_zh_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth21_3needle_zh_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth31_3needle_zh_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth42_3needle_zh_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth52_3needle_zh_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth63_3needle_zh_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth73_3needle_zh_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth84_3needle_zh_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth94_3needle_zh_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth100_3needle_zh_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth0_3needle_zh_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth10_3needle_zh_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth21_3needle_zh_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth31_3needle_zh_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth42_3needle_zh_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth52_3needle_zh_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth63_3needle_zh_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth73_3needle_zh_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth84_3needle_zh_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth94_3needle_zh_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth100_3needle_zh_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth0_3needle_zh_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth10_3needle_zh_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth21_3needle_zh_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth31_3needle_zh_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth42_3needle_zh_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth52_3needle_zh_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth63_3needle_zh_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth73_3needle_zh_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth84_3needle_zh_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth94_3needle_zh_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth100_3needle_zh_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth0_3needle_zh_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth10_3needle_zh_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth21_3needle_zh_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth31_3needle_zh_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth42_3needle_zh_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth52_3needle_zh_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth63_3needle_zh_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth73_3needle_zh_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth84_3needle_zh_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth94_3needle_zh_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth100_3needle_zh_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth0_3needle_zh_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth10_3needle_zh_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth21_3needle_zh_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth31_3needle_zh_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth42_3needle_zh_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth52_3needle_zh_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth63_3needle_zh_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth73_3needle_zh_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth84_3needle_zh_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth94_3needle_zh_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth100_3needle_zh_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth0_3needle_zh_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth10_3needle_zh_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth21_3needle_zh_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth31_3needle_zh_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth42_3needle_zh_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth52_3needle_zh_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth63_3needle_zh_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth73_3needle_zh_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth84_3needle_zh_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth94_3needle_zh_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth100_3needle_zh_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth0_3needle_zh_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth10_3needle_zh_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth21_3needle_zh_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth31_3needle_zh_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth42_3needle_zh_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth52_3needle_zh_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth63_3needle_zh_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth73_3needle_zh_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth84_3needle_zh_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth94_3needle_zh_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth100_3needle_zh_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=3,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth0_4needle_zh_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth10_4needle_zh_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth21_4needle_zh_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth31_4needle_zh_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth42_4needle_zh_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth52_4needle_zh_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth63_4needle_zh_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth73_4needle_zh_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth84_4needle_zh_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth94_4needle_zh_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth100_4needle_zh_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth0_4needle_zh_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth10_4needle_zh_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth21_4needle_zh_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth31_4needle_zh_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth42_4needle_zh_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth52_4needle_zh_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth63_4needle_zh_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth73_4needle_zh_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth84_4needle_zh_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth94_4needle_zh_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth100_4needle_zh_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth0_4needle_zh_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth10_4needle_zh_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth21_4needle_zh_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth31_4needle_zh_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth42_4needle_zh_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth52_4needle_zh_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth63_4needle_zh_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth73_4needle_zh_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth84_4needle_zh_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth94_4needle_zh_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth100_4needle_zh_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth0_4needle_zh_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth10_4needle_zh_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth21_4needle_zh_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth31_4needle_zh_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth42_4needle_zh_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth52_4needle_zh_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth63_4needle_zh_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth73_4needle_zh_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth84_4needle_zh_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth94_4needle_zh_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth100_4needle_zh_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth0_4needle_zh_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth10_4needle_zh_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth21_4needle_zh_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth31_4needle_zh_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth42_4needle_zh_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth52_4needle_zh_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth63_4needle_zh_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth73_4needle_zh_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth84_4needle_zh_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth94_4needle_zh_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth100_4needle_zh_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth0_4needle_zh_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth10_4needle_zh_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth21_4needle_zh_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth31_4needle_zh_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth42_4needle_zh_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth52_4needle_zh_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth63_4needle_zh_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth73_4needle_zh_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth84_4needle_zh_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth94_4needle_zh_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth100_4needle_zh_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth0_4needle_zh_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth10_4needle_zh_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth21_4needle_zh_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth31_4needle_zh_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth42_4needle_zh_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth52_4needle_zh_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth63_4needle_zh_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth73_4needle_zh_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth84_4needle_zh_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth94_4needle_zh_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth100_4needle_zh_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth0_4needle_zh_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth10_4needle_zh_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth21_4needle_zh_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth31_4needle_zh_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth42_4needle_zh_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth52_4needle_zh_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth63_4needle_zh_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth73_4needle_zh_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth84_4needle_zh_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth94_4needle_zh_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth100_4needle_zh_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=4,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth0_5needle_zh_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth10_5needle_zh_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth21_5needle_zh_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth31_5needle_zh_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth42_5needle_zh_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth52_5needle_zh_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth63_5needle_zh_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth73_5needle_zh_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth84_5needle_zh_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth94_5needle_zh_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth100_5needle_zh_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth0_5needle_zh_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth10_5needle_zh_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth21_5needle_zh_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth31_5needle_zh_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth42_5needle_zh_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth52_5needle_zh_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth63_5needle_zh_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth73_5needle_zh_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth84_5needle_zh_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth94_5needle_zh_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length13000Depth100_5needle_zh_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth0_5needle_zh_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth10_5needle_zh_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth21_5needle_zh_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth31_5needle_zh_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth42_5needle_zh_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth52_5needle_zh_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth63_5needle_zh_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth73_5needle_zh_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth84_5needle_zh_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth94_5needle_zh_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length17000Depth100_5needle_zh_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth0_5needle_zh_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth10_5needle_zh_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth21_5needle_zh_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth31_5needle_zh_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth42_5needle_zh_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth52_5needle_zh_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth63_5needle_zh_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth73_5needle_zh_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth84_5needle_zh_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth94_5needle_zh_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length21000Depth100_5needle_zh_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth0_5needle_zh_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth10_5needle_zh_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth21_5needle_zh_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth31_5needle_zh_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth42_5needle_zh_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth52_5needle_zh_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth63_5needle_zh_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth73_5needle_zh_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth84_5needle_zh_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth94_5needle_zh_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length25000Depth100_5needle_zh_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth0_5needle_zh_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth10_5needle_zh_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth21_5needle_zh_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth31_5needle_zh_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth42_5needle_zh_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth52_5needle_zh_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth63_5needle_zh_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth73_5needle_zh_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth84_5needle_zh_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth94_5needle_zh_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length29000Depth100_5needle_zh_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth0_5needle_zh_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth10_5needle_zh_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth21_5needle_zh_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth31_5needle_zh_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth42_5needle_zh_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth52_5needle_zh_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth63_5needle_zh_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth73_5needle_zh_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth84_5needle_zh_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth94_5needle_zh_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length31000Depth100_5needle_zh_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth0_5needle_zh_32k',
        depth=0,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth10_5needle_zh_32k',
        depth=10,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth21_5needle_zh_32k',
        depth=21,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth31_5needle_zh_32k',
        depth=31,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth42_5needle_zh_32k',
        depth=42,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth52_5needle_zh_32k',
        depth=52,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth63_5needle_zh_32k',
        depth=63,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth73_5needle_zh_32k',
        depth=73,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth84_5needle_zh_32k',
        depth=84,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth94_5needle_zh_32k',
        depth=94,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length32000Depth100_5needle_zh_32k',
        depth=100,
        diff=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.multi.NeedleBenchMultiEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='multi_needle_reasoning_zh.json',
        num_needles=5,
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.multi.NeedleBenchMultiDataset'),
    dict(abbr='Length9000Depth0_origin_en_32k',
        depth=0,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length9000Depth10_origin_en_32k',
        depth=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length9000Depth21_origin_en_32k',
        depth=21,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length9000Depth31_origin_en_32k',
        depth=31,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length9000Depth42_origin_en_32k',
        depth=42,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length9000Depth52_origin_en_32k',
        depth=52,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length9000Depth63_origin_en_32k',
        depth=63,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length9000Depth73_origin_en_32k',
        depth=73,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length9000Depth84_origin_en_32k',
        depth=84,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length9000Depth94_origin_en_32k',
        depth=94,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length9000Depth100_origin_en_32k',
        depth=100,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length13000Depth0_origin_en_32k',
        depth=0,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length13000Depth10_origin_en_32k',
        depth=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length13000Depth21_origin_en_32k',
        depth=21,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length13000Depth31_origin_en_32k',
        depth=31,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length13000Depth42_origin_en_32k',
        depth=42,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length13000Depth52_origin_en_32k',
        depth=52,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length13000Depth63_origin_en_32k',
        depth=63,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length13000Depth73_origin_en_32k',
        depth=73,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length13000Depth84_origin_en_32k',
        depth=84,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length13000Depth94_origin_en_32k',
        depth=94,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length13000Depth100_origin_en_32k',
        depth=100,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length17000Depth0_origin_en_32k',
        depth=0,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length17000Depth10_origin_en_32k',
        depth=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length17000Depth21_origin_en_32k',
        depth=21,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length17000Depth31_origin_en_32k',
        depth=31,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length17000Depth42_origin_en_32k',
        depth=42,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length17000Depth52_origin_en_32k',
        depth=52,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length17000Depth63_origin_en_32k',
        depth=63,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length17000Depth73_origin_en_32k',
        depth=73,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length17000Depth84_origin_en_32k',
        depth=84,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length17000Depth94_origin_en_32k',
        depth=94,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length17000Depth100_origin_en_32k',
        depth=100,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length21000Depth0_origin_en_32k',
        depth=0,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length21000Depth10_origin_en_32k',
        depth=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length21000Depth21_origin_en_32k',
        depth=21,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length21000Depth31_origin_en_32k',
        depth=31,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length21000Depth42_origin_en_32k',
        depth=42,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length21000Depth52_origin_en_32k',
        depth=52,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length21000Depth63_origin_en_32k',
        depth=63,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length21000Depth73_origin_en_32k',
        depth=73,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length21000Depth84_origin_en_32k',
        depth=84,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length21000Depth94_origin_en_32k',
        depth=94,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length21000Depth100_origin_en_32k',
        depth=100,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length25000Depth0_origin_en_32k',
        depth=0,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length25000Depth10_origin_en_32k',
        depth=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length25000Depth21_origin_en_32k',
        depth=21,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length25000Depth31_origin_en_32k',
        depth=31,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length25000Depth42_origin_en_32k',
        depth=42,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length25000Depth52_origin_en_32k',
        depth=52,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length25000Depth63_origin_en_32k',
        depth=63,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length25000Depth73_origin_en_32k',
        depth=73,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length25000Depth84_origin_en_32k',
        depth=84,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length25000Depth94_origin_en_32k',
        depth=94,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length25000Depth100_origin_en_32k',
        depth=100,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length29000Depth0_origin_en_32k',
        depth=0,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length29000Depth10_origin_en_32k',
        depth=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length29000Depth21_origin_en_32k',
        depth=21,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length29000Depth31_origin_en_32k',
        depth=31,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length29000Depth42_origin_en_32k',
        depth=42,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length29000Depth52_origin_en_32k',
        depth=52,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length29000Depth63_origin_en_32k',
        depth=63,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length29000Depth73_origin_en_32k',
        depth=73,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length29000Depth84_origin_en_32k',
        depth=84,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length29000Depth94_origin_en_32k',
        depth=94,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length29000Depth100_origin_en_32k',
        depth=100,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length31000Depth0_origin_en_32k',
        depth=0,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length31000Depth10_origin_en_32k',
        depth=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length31000Depth21_origin_en_32k',
        depth=21,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length31000Depth31_origin_en_32k',
        depth=31,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length31000Depth42_origin_en_32k',
        depth=42,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length31000Depth52_origin_en_32k',
        depth=52,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length31000Depth63_origin_en_32k',
        depth=63,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length31000Depth73_origin_en_32k',
        depth=73,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length31000Depth84_origin_en_32k',
        depth=84,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length31000Depth94_origin_en_32k',
        depth=94,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length31000Depth100_origin_en_32k',
        depth=100,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length32000Depth0_origin_en_32k',
        depth=0,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length32000Depth10_origin_en_32k',
        depth=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length32000Depth21_origin_en_32k',
        depth=21,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length32000Depth31_origin_en_32k',
        depth=31,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length32000Depth42_origin_en_32k',
        depth=42,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length32000Depth52_origin_en_32k',
        depth=52,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length32000Depth63_origin_en_32k',
        depth=63,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length32000Depth73_origin_en_32k',
        depth=73,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length32000Depth84_origin_en_32k',
        depth=84,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length32000Depth94_origin_en_32k',
        depth=94,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length32000Depth100_origin_en_32k',
        depth=100,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length9000Depth0_origin_zh_32k',
        depth=0,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length9000Depth10_origin_zh_32k',
        depth=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length9000Depth21_origin_zh_32k',
        depth=21,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length9000Depth31_origin_zh_32k',
        depth=31,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length9000Depth42_origin_zh_32k',
        depth=42,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length9000Depth52_origin_zh_32k',
        depth=52,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length9000Depth63_origin_zh_32k',
        depth=63,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length9000Depth73_origin_zh_32k',
        depth=73,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length9000Depth84_origin_zh_32k',
        depth=84,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length9000Depth94_origin_zh_32k',
        depth=94,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length9000Depth100_origin_zh_32k',
        depth=100,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length13000Depth0_origin_zh_32k',
        depth=0,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length13000Depth10_origin_zh_32k',
        depth=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length13000Depth21_origin_zh_32k',
        depth=21,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length13000Depth31_origin_zh_32k',
        depth=31,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length13000Depth42_origin_zh_32k',
        depth=42,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length13000Depth52_origin_zh_32k',
        depth=52,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length13000Depth63_origin_zh_32k',
        depth=63,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length13000Depth73_origin_zh_32k',
        depth=73,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length13000Depth84_origin_zh_32k',
        depth=84,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length13000Depth94_origin_zh_32k',
        depth=94,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length13000Depth100_origin_zh_32k',
        depth=100,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length17000Depth0_origin_zh_32k',
        depth=0,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length17000Depth10_origin_zh_32k',
        depth=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length17000Depth21_origin_zh_32k',
        depth=21,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length17000Depth31_origin_zh_32k',
        depth=31,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length17000Depth42_origin_zh_32k',
        depth=42,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length17000Depth52_origin_zh_32k',
        depth=52,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length17000Depth63_origin_zh_32k',
        depth=63,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length17000Depth73_origin_zh_32k',
        depth=73,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length17000Depth84_origin_zh_32k',
        depth=84,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length17000Depth94_origin_zh_32k',
        depth=94,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length17000Depth100_origin_zh_32k',
        depth=100,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length21000Depth0_origin_zh_32k',
        depth=0,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length21000Depth10_origin_zh_32k',
        depth=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length21000Depth21_origin_zh_32k',
        depth=21,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length21000Depth31_origin_zh_32k',
        depth=31,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length21000Depth42_origin_zh_32k',
        depth=42,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length21000Depth52_origin_zh_32k',
        depth=52,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length21000Depth63_origin_zh_32k',
        depth=63,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length21000Depth73_origin_zh_32k',
        depth=73,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length21000Depth84_origin_zh_32k',
        depth=84,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length21000Depth94_origin_zh_32k',
        depth=94,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length21000Depth100_origin_zh_32k',
        depth=100,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length25000Depth0_origin_zh_32k',
        depth=0,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length25000Depth10_origin_zh_32k',
        depth=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length25000Depth21_origin_zh_32k',
        depth=21,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length25000Depth31_origin_zh_32k',
        depth=31,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length25000Depth42_origin_zh_32k',
        depth=42,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length25000Depth52_origin_zh_32k',
        depth=52,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length25000Depth63_origin_zh_32k',
        depth=63,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length25000Depth73_origin_zh_32k',
        depth=73,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length25000Depth84_origin_zh_32k',
        depth=84,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length25000Depth94_origin_zh_32k',
        depth=94,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length25000Depth100_origin_zh_32k',
        depth=100,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length29000Depth0_origin_zh_32k',
        depth=0,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length29000Depth10_origin_zh_32k',
        depth=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length29000Depth21_origin_zh_32k',
        depth=21,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length29000Depth31_origin_zh_32k',
        depth=31,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length29000Depth42_origin_zh_32k',
        depth=42,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length29000Depth52_origin_zh_32k',
        depth=52,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length29000Depth63_origin_zh_32k',
        depth=63,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length29000Depth73_origin_zh_32k',
        depth=73,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length29000Depth84_origin_zh_32k',
        depth=84,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length29000Depth94_origin_zh_32k',
        depth=94,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length29000Depth100_origin_zh_32k',
        depth=100,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length31000Depth0_origin_zh_32k',
        depth=0,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length31000Depth10_origin_zh_32k',
        depth=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length31000Depth21_origin_zh_32k',
        depth=21,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length31000Depth31_origin_zh_32k',
        depth=31,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length31000Depth42_origin_zh_32k',
        depth=42,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length31000Depth52_origin_zh_32k',
        depth=52,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length31000Depth63_origin_zh_32k',
        depth=63,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length31000Depth73_origin_zh_32k',
        depth=73,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length31000Depth84_origin_zh_32k',
        depth=84,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length31000Depth94_origin_zh_32k',
        depth=94,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length31000Depth100_origin_zh_32k',
        depth=100,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length32000Depth0_origin_zh_32k',
        depth=0,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length32000Depth10_origin_zh_32k',
        depth=10,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length32000Depth21_origin_zh_32k',
        depth=21,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length32000Depth31_origin_zh_32k',
        depth=31,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length32000Depth42_origin_zh_32k',
        depth=42,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length32000Depth52_origin_zh_32k',
        depth=52,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length32000Depth63_origin_zh_32k',
        depth=63,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length32000Depth73_origin_zh_32k',
        depth=73,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length32000Depth84_origin_zh_32k',
        depth=84,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length32000Depth94_origin_zh_32k',
        depth=94,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length32000Depth100_origin_zh_32k',
        depth=100,
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.origin.NeedleBenchOriginEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=10,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.origin.NeedleBenchOriginDataset'),
    dict(abbr='Length9000_parallel_en_32k',
        depths=[
            0,
            10,
            21,
            31,
            42,
            52,
            63,
            73,
            84,
            94,
            100,
            ],
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.parallel.NeedleBenchParallelEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=9000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=25,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.parallel.NeedleBenchParallelDataset'),
    dict(abbr='Length13000_parallel_en_32k',
        depths=[
            0,
            10,
            21,
            31,
            42,
            52,
            63,
            73,
            84,
            94,
            100,
            ],
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.parallel.NeedleBenchParallelEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=13000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=25,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.parallel.NeedleBenchParallelDataset'),
    dict(abbr='Length17000_parallel_en_32k',
        depths=[
            0,
            10,
            21,
            31,
            42,
            52,
            63,
            73,
            84,
            94,
            100,
            ],
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.parallel.NeedleBenchParallelEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=17000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=25,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.parallel.NeedleBenchParallelDataset'),
    dict(abbr='Length21000_parallel_en_32k',
        depths=[
            0,
            10,
            21,
            31,
            42,
            52,
            63,
            73,
            84,
            94,
            100,
            ],
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.parallel.NeedleBenchParallelEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=21000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=25,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.parallel.NeedleBenchParallelDataset'),
    dict(abbr='Length25000_parallel_en_32k',
        depths=[
            0,
            10,
            21,
            31,
            42,
            52,
            63,
            73,
            84,
            94,
            100,
            ],
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.parallel.NeedleBenchParallelEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=25000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=25,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.parallel.NeedleBenchParallelDataset'),
    dict(abbr='Length29000_parallel_en_32k',
        depths=[
            0,
            10,
            21,
            31,
            42,
            52,
            63,
            73,
            84,
            94,
            100,
            ],
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.parallel.NeedleBenchParallelEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=29000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=25,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.parallel.NeedleBenchParallelDataset'),
    dict(abbr='Length31000_parallel_en_32k',
        depths=[
            0,
            10,
            21,
            31,
            42,
            52,
            63,
            73,
            84,
            94,
            100,
            ],
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.parallel.NeedleBenchParallelEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=31000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=25,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.parallel.NeedleBenchParallelDataset'),
    dict(abbr='Length32000_parallel_en_32k',
        depths=[
            0,
            10,
            21,
            31,
            42,
            52,
            63,
            73,
            84,
            94,
            100,
            ],
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.parallel.NeedleBenchParallelEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'PaulGrahamEssays.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='English',
        length=32000,
        length_buffer=3000,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=25,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.parallel.NeedleBenchParallelDataset'),
    dict(abbr='Length9000_parallel_zh_32k',
        depths=[
            0,
            10,
            21,
            31,
            42,
            52,
            63,
            73,
            84,
            94,
            100,
            ],
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.parallel.NeedleBenchParallelEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=9000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=25,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.parallel.NeedleBenchParallelDataset'),
    dict(abbr='Length13000_parallel_zh_32k',
        depths=[
            0,
            10,
            21,
            31,
            42,
            52,
            63,
            73,
            84,
            94,
            100,
            ],
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.parallel.NeedleBenchParallelEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=13000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=25,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.parallel.NeedleBenchParallelDataset'),
    dict(abbr='Length17000_parallel_zh_32k',
        depths=[
            0,
            10,
            21,
            31,
            42,
            52,
            63,
            73,
            84,
            94,
            100,
            ],
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.parallel.NeedleBenchParallelEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=17000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=25,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.parallel.NeedleBenchParallelDataset'),
    dict(abbr='Length21000_parallel_zh_32k',
        depths=[
            0,
            10,
            21,
            31,
            42,
            52,
            63,
            73,
            84,
            94,
            100,
            ],
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.parallel.NeedleBenchParallelEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=21000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=25,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.parallel.NeedleBenchParallelDataset'),
    dict(abbr='Length25000_parallel_zh_32k',
        depths=[
            0,
            10,
            21,
            31,
            42,
            52,
            63,
            73,
            84,
            94,
            100,
            ],
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.parallel.NeedleBenchParallelEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=25000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=25,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.parallel.NeedleBenchParallelDataset'),
    dict(abbr='Length29000_parallel_zh_32k',
        depths=[
            0,
            10,
            21,
            31,
            42,
            52,
            63,
            73,
            84,
            94,
            100,
            ],
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.parallel.NeedleBenchParallelEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=29000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=25,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.parallel.NeedleBenchParallelDataset'),
    dict(abbr='Length31000_parallel_zh_32k',
        depths=[
            0,
            10,
            21,
            31,
            42,
            52,
            63,
            73,
            84,
            94,
            100,
            ],
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.parallel.NeedleBenchParallelEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=31000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=25,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.parallel.NeedleBenchParallelDataset'),
    dict(abbr='Length32000_parallel_zh_32k',
        depths=[
            0,
            10,
            21,
            31,
            42,
            52,
            63,
            73,
            84,
            94,
            100,
            ],
        eval_cfg=dict(
            dataset_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_dataset_postprocess'),
            evaluator=dict(
                type='opencompass.datasets.needlebench.parallel.NeedleBenchParallelEvaluator'),
            pred_postprocessor=dict(
                type='opencompass.datasets.needlebench.origin.needlebench_postprocess'),
            pred_role='BOT'),
        file_list=[
            'zh_finance.jsonl',
            ],
        guide=True,
        infer_cfg=dict(
            inferencer=dict(
                type='opencompass.openicl.icl_inferencer.GenInferencer'),
            prompt_template=dict(
                template=dict(
                    round=[
                        dict(prompt='{prompt}',
                            role='HUMAN'),
                        dict(prompt='{answer}\n',
                            role='BOT'),
                        ]),
                type='opencompass.openicl.icl_prompt_template.PromptTemplate'),
            retriever=dict(
                type='opencompass.openicl.icl_retriever.ZeroRetriever')),
        language='Chinese',
        length=32000,
        length_buffer=200,
        needle_file_name='needles.jsonl',
        num_repeats_per_file=25,
        path='./data/needlebench',
        reader_cfg=dict(
            input_columns=[
                'prompt',
                ],
            output_column='answer'),
        tokenizer_model='gpt-4',
        type='opencompass.datasets.needlebench.parallel.NeedleBenchParallelDataset'),
    ]
work_dir='outputs/default/20240811_234605'